{"version":3,"sources":["components/layouts/Drawer.jsx","components/utils/components/charts/PieChart.jsx","components/utils/components/charts/BarChart.jsx","components/Dashboard/Home.jsx","api/repositories/Repository.js","api/repositories/patientRepository.js","api/repositories/monitorRepository.js","api/repositories/wardRepository.js","api/repositories/statuscodesRepository.js","api/repositories/RepositoryFactory.js","components/Monitor/Telemetry/RTChart.jsx","components/Monitor/Telemetry/Card.jsx","components/Monitor/Telemetry/Dashboard.jsx","components/Monitor/List.jsx","components/Monitor/Create.jsx","components/utils/components/toolbar/DateTimePatientCards.jsx","components/utils/components/feedback/Progress.jsx","components/Monitor/Setup.jsx","components/utils/components/table/MaterialTable.jsx","components/Patient/List.jsx","components/Patient/Register.jsx","components/Patient/PatientChart.jsx","components/Patient/Notes.jsx","components/Patient/Details.jsx","components/utils/components/testing.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexGrow","grow","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","justifyContent","padding","mixins","content","MiniDrawer","props","children","classes","useTheme","React","useState","open","setOpen","name","link","menu","AccountBox","Assignment","DesktopWindows","Settings","menuIcons","className","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Menu","Typography","variant","noWrap","Drawer","paper","direction","ChevronRight","ChevronLeft","Divider","List","map","el","i","key","to","pathname","state","style","textDecoration","fontWeight","ListItem","button","ListItemIcon","ListItemText","primary","PieChart","colors","labels","text","textColor","fontSize","tickColor","legends","data","id","label","value","margin","top","right","bottom","left","startAngle","innerRadius","padAngle","cornerRadius","bar","borderWidth","borderColor","from","modifiers","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","slicesLabelsSkipAngle","slicesLabelsTextColor","animate","motionStiffness","motionDamping","defs","type","background","size","stagger","rotation","lineWidth","fill","match","anchor","translateY","itemWidth","itemHeight","itemTextColor","symbolSize","symbolShape","effects","on","BarChart","keys","indexBy","index","scheme","groupMode","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","dataFrom","justify","translateX","itemsSpacing","itemDirection","itemOpacity","textAlign","palette","secondary","modPaper","height","flexDirection","Home","time","setTime","confirmedCases","probableCases","suspectedCases","discharged","deaths","dashboardData","useEffect","setInterval","timeString","Date","toLocaleTimeString","Grid","container","item","xs","Paper","align","moment","format","border","marginTop","row","dummyCases","dummyPatients","component","baseURL","process","axios","getPatient","patientId","Repository","get","getPatients","createPatient","payload","post","deletePatient","formData","FormData","append","updatePatient","getPatientConfig","addPatientConfig","Object","entries","trim","createDefaultPatientConfig","this","patientid","ecg_st_msec","heartrate_upper_bpm","heartrate_lower_bpm","pulserate_upper_bpm","pulserate_lower_bpm","oxygen_upper_saturation","oxygen_lower_saturation","respiratory_upper_rpm","respiratory_lower_rpm","bp_systolic_upper","bp_systolic_lower","bp_diastolic_upper","bp_diastolic_lower","bp_time_frame","temperature_upper","temperature_lower","getPatientObservation","getLivePatientObservation","getAllObservation","observationList","code","console","log","tableData","10","11","12","13","14","15","16","17","18","19","20","21","22","23","spec_date","Promise","all","a","_","isEmpty","PatientRangedObservation","e","hour_clustered","assign","avg_value","updatedTableData","values","parsedData","sortBy","o","getMonitor","monitorId","getMonitorWithPatient","getMonitorsWithPatient","addMonitor","uuid","slice","deleteMonitor","addPatientToMonitor","removePatientFromMonitor","incrementPatientSlot","patientSlot","description","decrementPatientSlot","requestBP","getRequestBPValue","requestid","updateMonitor","response","createWard","updateWard","deleteWard","wardId","getPatientClassification","getPatientCovidCase","getPatientAdmissionStatus","repositories","patient","PatientRepository","monitor","MonitorRepository","ward","WardRepository","telemetry","TelemetryRepository","statuscodes","StatuscodesRepository","RepositoryFactory","commonProperties","generateDrinkStats","enableSlices","Component","createMuiTheme","responsiveFontSizes","backgroundColor","table","minWidth","bordered","borderBottom","ecg","spo2","resp","error","TelemetryCard","overflowText","overflow","textOverflow","rxbox","chartHeight","patientConfig","setPatientConfig","issue","setIssue","rr","temp","pr","bp","errors","setErrors","primary_rr","secondary_rr","hr","systolic_bp","diastolic_bp","mean_arterial_pressure","length","alert","getECG","findIndex","tpo_code","tpo_value","getBP","systolicIndex","diastolicIndex","systolicVal","diastolicVal","getTemp","getRR","secondaryIndex","getSpo2","getPulseRate","getMAP","isError","setStyle","rpi_patientid","err","rpc_bp_systolic_lower","rpc_bp_systolic_upper","rpc_bp_diastolic_upper","rpc_bp_diastolic_lower","rpc_temperature_lower","rpc_temperature_upper","rpc_respiratory_lower_rpm","rpc_respiratory_upper_rpm","rpc_oxygen_lower_saturation","rpc_oxygen_upper_saturation","rpc_pulserate_lower_bpm","rpc_pulserate_upper_bpm","tempValue","respValue","spo2Value","bpValue","prValue","split","validateRxboxConfig","tpo_effectivity","local","getTime","arr","some","ThemeProvider","rpi_bednumber","middleInitial","rpi_patientmname","rpi_patientfname","rpi_patientlname","toUpperCase","getNameDetails","rpi_age","rpi_gender","rpi_covid19","role","replace","TelemetryDashboard","rxboxData","setRxboxData","patients","setPatients","setMonitor","refreshInterval","getMonitorWithPatientId","params","updatedMonitor","patientIds","JSON","parse","result","success","PatientData_report","patientsData","validateRxboxData","tpo_dataerror","now","utc","effectiveDate","diff","getPatientRxboxData","filter","Array","isArray","indexOf","tpo_subject","status","obs","observations","patientBasicObservation","parseInt","search","setTimeout","patientCards","patientIndex","push","renderPatients","createData","calories","fat","carbs","protein","rows","Create","menuAnchor","setMenuAnchor","toggleMenuAnchor","event","currentTarget","closeMenuAnchor","float","Button","startIcon","Add","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","scope","MoreVert","anchorEl","keepMounted","Boolean","onClose","MenuItem","card","maxWidth","DateTimePatientCards","patientCount","setPatientCount","getpatientlist_report","CardContent","DateRange","Alarm","Person","backdrop","Progress","Backdrop","CircularProgress","MySwal","withReactContent","Swal","invisible","visibility","empty","occupied","cardContent","paddingBottom","whiteText","formControl","textField","MonitorSetup","rowRef","useRef","page","setPage","rowsPerPage","setRowsPerPage","monitorLoader","setMonitorLoader","admissionStatus","covidStatus","classificationStatus","setFilter","maximumSlots","monitors","setMonitors","patientStatus","setPatientStatus","getStatuscodes","filter_statuscode_report","fire","title","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","addPatientSlot","updateMonitors","cloneDeep","deletePatientSlot","onDragEnd","current","source","destination","draggableId","droppableId","sourceMonitorId","destinationMonitorId","sourceIndex","sourceMonitor","destinationIndex","destinationMonitor","filterPatients","keyword","flat","filteredPatients","toLowerCase","includes","editMonitorForm","input","inputValue","inputValidator","showConfirmButton","LibraryAdd","onBeforeCapture","monitorsData","Edit","provided","snapshot","droppableProps","ref","innerRef","isDraggingOver","Close","monitorIndex","patientsComponent","draggableProps","dragHandleProps","emptySlots","placeholder","renderMonitors","FormControl","InputLabel","Select","labelId","autoWidth","onChange","target","rps_category","rps_name","OutlinedInput","endAdornment","InputAdornment","Search","aria-describedby","inputProps","labelWidth","fullWidth","draggableProvided","draggableSnapshot","node","isDragging","DragIndicator","rpi_date_admitted","renderTable","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","tableIcons","forwardRef","Check","Clear","Delete","DetailPanel","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","SortArrow","ThirdStateCheck","ViewColumn","CustomMaterialTable","icons","PatientList","history","setAnchorEl","chosenPatient","setChosenPatient","closeOptions","admission","classification","deletepatient_report","columns","field","render","rowData","customFilterAndSearch","sorting","disableClick","MaterialTable","onRowClick","options","gridInputMargin","smallFormControl","PatientRegister","useForm","register","handleSubmit","watch","setValue","control","getValues","date_admitted","lastname","firstname","birthdate","age","gender","covid19_case","remarks","address","city","country","contact_number","email_address","sss_gsis_number","philhealth_number","hmo","emergency_name","emergency_relationship","emergency_contact_number","setPatient","patientHandler","modifiedVal","diffInYears","toFixed","res","parsePatientData","updatedData","rpi_address","rpi_birthday","rpi_city","rpi_contact","rpi_contact_name","rpi_contact_number","rpi_contact_relationship","rpi_country","rps_case","rpi_dateregistered","email","rpi_email_add","rpi_hmo","middlename","rps_admission","rpi_philhealth_number","rpi_remarks","rpi_sss_gsis_number","ward_id","rpi_ward_id","bed_number","civil_status","rpi_civilstatus","patient_classification","rps_class","validateInputs","patientfname","patientlname","birthday","covidcase","admissionstatus","contact","sss_gsis","philhealth","admissiondate","emcontactname","emcontactnumber","emrelationship","patientmname","patientstatus","bed_no","onSubmit","updatepatient_report","catch","addpatient_report","patient_id","required","gutterBottom","light","marginBottom","TextField","inputRef","validate","InvalidInput","utils","MomentUtils","inputVariant","disableFuture","clearable","date","disabled","rps_id","multiline","positive","detailsKey","PatientChart","observation","observationType","observationData","setObservationData","dateFilter","setDateFilter","timeCoverage","chartProps","setChartProps","obscode","len","val","x","y","obsBP","responseBP","areaOpacity","elevation","enableArea","xScale","yScale","min","max","stacked","reverse","orient","pointSize","pointColor","pointBorderWidth","pointBorderColor","pointLabel","pointLabelYOffset","useMesh","sliceTooltip","points","point","serieColor","paddingRight","serieId","yFormatted","curve","symbolBorderColor","itemBackground","PatientNotes","parser","email_add","civilstatus","contact_name","contact_relationship","bednumber","mode","setMode","note","setNotes","editNote","setEditNote","toggleMode","confirmCancel","isEqual","InputProps","readOnly","PatientDetails","setTableData","loader","setLoader","requestId","setRequestId","query","updatePatientConfig","time_frame","RequestResult","getBPRequest","BPValue","cnt","clearInterval","confirmBPRequest","integer","RealTimeChart","next","dataA","offset","last","Math","round","random","dataB","dataC","setState","setMinutes","setSeconds","setMilliseconds","range","formatTime","timeFormat","timer","tickValues","enablePoints","enableGridX","isInteractive","axis","ticks","grid","line","stroke","strokeDasharray","typography","fontFamily","join","App","exact","path","Testing","SetupMonitor","ListMonitor","window","location","hostname","ReactDOM","forceRefresh","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0af7ba23.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport {\r\n  AppBar,\r\n  Drawer,\r\n  Toolbar,\r\n  List,\r\n  CssBaseline,\r\n  Typography,\r\n  Divider,\r\n  IconButton,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  TextField,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Menu as MenuIcon,\r\n  ChevronLeft as ChevronLeftIcon,\r\n  ChevronRight as ChevronRightIcon,\r\n  Search,\r\n  AccountBox,\r\n  Assignment,\r\n  Settings,\r\n  Home,\r\n  DesktopWindows,\r\n} from \"@material-ui/icons\";\r\n\r\nconst drawerWidth = 300;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexGrow: 1,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: \"nowrap\",\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: \"hidden\",\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function MiniDrawer(props) {\r\n  const { children } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [menu] = useState([\r\n    // { name: \"HOME\", link: \"home\" },\r\n    { name: \"PATIENT REGISTRATION\", link: \"patient/register\" },\r\n    { name: \"PATIENT LIST\", link: \"patient/list\" },\r\n    { name: \"MONITORING SETTINGS\", link: \"monitor/setup\" },\r\n    // { name: \"SETTINGS\", link: \"settings\" },\r\n  ]);\r\n  const [menuIcons] = useState([\r\n    // <Home />,\r\n    <AccountBox />,\r\n    <Assignment />,\r\n    <DesktopWindows />,\r\n    <Settings />,\r\n  ]);\r\n  const [menuAnchor, setMenuAnchor] = React.useState(null);\r\n\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleMenu = (event) => {\r\n    setMenuAnchor(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setMenuAnchor(null);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, {\r\n              [classes.hide]: open,\r\n            })}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            WARD 1\r\n          </Typography>\r\n          {/* <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\r\n            <Tab label=\"HOME\" style={{ minHeight: \"64px\" }} />\r\n            {wards.map((el) => {\r\n              return <Tab label={el} style={{ minHeight: \"64px\" }} />;\r\n            })}\r\n          </Tabs> */}\r\n          <div className={classes.grow} />\r\n          <div>\r\n            <Typography variant=\"h5\" noWrap>\r\n              PROJECT LIFELINE\r\n            </Typography>\r\n            {/* <IconButton\r\n              aria-label=\"account of current user\"\r\n              aria-controls=\"menu-appbar\"\r\n              aria-haspopup=\"true\"\r\n              onClick={handleMenu}\r\n              color=\"inherit\"\r\n            >\r\n              <AccountCircle />\r\n            </IconButton>\r\n            <Menu\r\n              id=\"menu-appbar\"\r\n              anchorEl={menuAnchor}\r\n              anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              open={Boolean(menuAnchor)}\r\n              onClose={handleClose}\r\n            >\r\n              <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n              <MenuItem onClick={handleClose}>My account</MenuItem>\r\n            </Menu> */}\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === \"rtl\" ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {/* \r\n              \"\"<ListItem button>\r\n            {!open ? (\r\n              <ListItemIcon>\r\n                <Search />\r\n              </ListItemIcon>\r\n            ) : (\r\n            )}\r\n            <ListItemText\r\n              primary={\r\n                <TextField\r\n                  className={classes.margin}\r\n                  id=\"input-with-icon-textfield\"\r\n                  // label=\"Search\"\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <Search />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              }\r\n            />\r\n          </ListItem> */}\r\n          {menu.map((el, i) => {\r\n            const { name, link } = el;\r\n            return (\r\n              <Link\r\n                key={name}\r\n                to={{\r\n                  pathname: `/${link}`,\r\n                  state: {},\r\n                }}\r\n                style={{ color: \"#606060\", textDecoration: \"none\", fontWeight: \"bold\" }}\r\n              >\r\n                <ListItem button>\r\n                  <ListItemIcon>{menuIcons[i]}</ListItemIcon>\r\n                  <ListItemText primary={<span style={{ fontWeight: \"bold\" }}>{name}</span>} />\r\n                </ListItem>\r\n              </Link>\r\n            );\r\n          })}\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        {children}\r\n        {/* <TabPanel value={value} index={0}>\r\n          {children}\r\n        </TabPanel>\r\n        {wards.map((el, i) => {\r\n          return (\r\n            <TabPanel value={value} index={i}>\r\n              {el}\r\n            </TabPanel>\r\n          );\r\n        })} */}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ResponsivePie } from \"@nivo/pie\";\r\n// make sure parent container have a defined height when using\r\n// responsive component, otherwise height will be 0 and\r\n// no chart will be rendered.\r\n// website examples showcase many properties,\r\n// you'll often use just a few of them.\r\n\r\nconst PieChart = () => {\r\n  const data = [\r\n    {\r\n      id: \"Male\",\r\n      label: \"Male\",\r\n      value: 180,\r\n      color: \"hsl(86, 70%, 50%)\",\r\n    },\r\n    {\r\n      id: \"Female\",\r\n      label: \"Female\",\r\n      value: 287,\r\n      // color: \"hsl(349, 70%, 50%)\",\r\n    },\r\n    // {\r\n    //   id: \"sass\",\r\n    //   label: \"sass\",\r\n    //   value: 233,\r\n    //   color: \"hsl(173, 70%, 50%)\",\r\n    // },\r\n    // {\r\n    //   id: \"rust\",\r\n    //   label: \"rust\",\r\n    //   value: 505,\r\n    //   color: \"hsl(120, 70%, 50%)\",\r\n    // },\r\n    // {\r\n    //   id: \"hack\",\r\n    //   label: \"hack\",\r\n    //   value: 350,\r\n    //   color: \"hsl(6, 70%, 50%)\",\r\n    // },\r\n  ];\r\n  const colors = { 'Female': \"rgb(70, 179, 230)\", '2018': 'red', 'Male': \"rgb(81, 90, 109)\"}\r\n  const getColor = bar => colors[bar.id]\r\n\r\n  return (\r\n    <ResponsivePie\r\n      theme={{\r\n        labels: {\r\n          text: {\r\n            textColor: \"#eee\",\r\n            fontSize: 22,\r\n            tickColor: \"#eee\",\r\n          },\r\n        },\r\n        legends: {\r\n          text: {\r\n            fontSize: 20,\r\n          }\r\n        }\r\n      }}\r\n      data={data}\r\n      margin={{ top: 100, right: 100, bottom: 100, left: 100 }}\r\n      // padding={{ top: 100, right: 100, bottom: 100, left: 100 }}\r\n      startAngle={-90}\r\n      // padding={{}}\r\n      innerRadius={0.35}\r\n      padAngle={1.5}\r\n      cornerRadius={3}\r\n      // colors={{ scheme: \"nivo\" }}\r\n      colors={getColor}\r\n      borderWidth={1}\r\n      borderColor={{ from: \"color\", modifiers: [[\"darker\", 0.2]] }}\r\n      // colors={{}}\r\n      radialLabelsSkipAngle={10}\r\n      radialLabelsTextXOffset={6}\r\n      radialLabelsTextColor=\"#333333\"\r\n      radialLabelsLinkOffset={0}\r\n      radialLabelsLinkDiagonalLength={16}\r\n      radialLabelsLinkHorizontalLength={24}\r\n      radialLabelsLinkStrokeWidth={1}\r\n      radialLabelsLinkColor={{ from: \"color\" }}\r\n      slicesLabelsSkipAngle={10}\r\n      slicesLabelsTextColor=\"#333333\"\r\n      animate={true}\r\n      motionStiffness={90}\r\n      motionDamping={15}\r\n      defs={[\r\n        {\r\n          id: \"dots\",\r\n          type: \"patternDots\",\r\n          background: \"inherit\",\r\n          color: \"rgba(255, 255, 255, 0.3)\",\r\n          size: 4,\r\n          padding: 1,\r\n          stagger: true,\r\n        },\r\n        {\r\n          id: \"lines\",\r\n          type: \"patternLines\",\r\n          background: \"inherit\",\r\n          color: \"rgba(255, 255, 255, 0.3)\",\r\n          rotation: -45,\r\n          lineWidth: 6,\r\n          spacing: 10,\r\n        },\r\n      ]}\r\n      fill={[\r\n        {\r\n          match: {\r\n            id: \"python\",\r\n          },\r\n          id: \"dots\",\r\n        },\r\n        {\r\n          match: {\r\n            id: \"scala\",\r\n          },\r\n          id: \"lines\",\r\n        },\r\n      ]}\r\n      legends={[\r\n        {\r\n          anchor: \"top\",\r\n          direction: \"row\",\r\n          translateY: -40,\r\n          itemWidth: 100,\r\n          itemHeight: 18,\r\n          itemTextColor: \"#999\",\r\n          symbolSize: 18,\r\n          symbolShape: \"circle\",\r\n          effects: [\r\n            {\r\n              on: \"hover\",\r\n              style: {\r\n                itemTextColor: \"#000\",\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PieChart;\r\n","import React from \"react\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\nimport data from \"./patients-data.json\";\r\n\r\nconst BarChart = props => {\r\n  const { data } = props;\r\n  return (\r\n    <ResponsiveBar\r\n      data={data.data}\r\n      keys={data.keys}\r\n      indexBy={data.index}\r\n      margin={{ top: 75, right: 130, bottom: 75, left: 60 }}\r\n      padding={0.3}\r\n      colors={{ scheme: \"nivo\" }}\r\n      groupMode=\"grouped\"\r\n      defs={[\r\n        {\r\n          id: \"dots\",\r\n          type: \"patternDots\",\r\n          background: \"inherit\",\r\n          color: \"#38bcb2\",\r\n          size: 4,\r\n          padding: 1,\r\n          stagger: true,\r\n        },\r\n        {\r\n          id: \"lines\",\r\n          type: \"patternLines\",\r\n          background: \"inherit\",\r\n          color: \"#eed312\",\r\n          rotation: -45,\r\n          lineWidth: 6,\r\n          spacing: 10,\r\n        },\r\n      ]}\r\n      fill={[\r\n        {\r\n          match: {\r\n            id: \"fries\",\r\n          },\r\n          id: \"dots\",\r\n        },\r\n        {\r\n          match: {\r\n            id: \"sandwich\",\r\n          },\r\n          id: \"lines\",\r\n        },\r\n      ]}\r\n      borderColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\r\n      axisTop={null}\r\n      axisRight={null}\r\n      axisBottom={{\r\n        tickSize: 5,\r\n        tickPadding: 5,\r\n        tickRotation: 0,\r\n        // legend: \"country\",\r\n        legend: \"\",\r\n        legendPosition: \"middle\",\r\n        legendOffset: 32,\r\n      }}\r\n      axisLeft={{\r\n        tickSize: 5,\r\n        tickPadding: 5,\r\n        tickRotation: 0,\r\n        // legend: \"patients\",\r\n        legend: \"\",\r\n        legendPosition: \"middle\",\r\n        legendOffset: -40,\r\n      }}\r\n      labelSkipWidth={12}\r\n      labelSkipHeight={12}\r\n      labelTextColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\r\n      legends={[\r\n\r\n        {\r\n          dataFrom: \"keys\",\r\n          anchor: \"top\",\r\n          direction: \"row\",\r\n          justify: false,\r\n          translateX: 12,\r\n          translateY: -20,\r\n          itemsSpacing: 40,\r\n          itemWidth: 170,\r\n          itemHeight: 10,\r\n          itemDirection: \"left-to-right\",\r\n          itemOpacity: 0.85,\r\n          symbolSize: 25,\r\n          effects: [\r\n            {\r\n              on: \"hover\",\r\n              style: {\r\n                itemOpacity: 1,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      ]}\r\n      animate={true}\r\n      motionStiffness={90}\r\n      motionDamping={15}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Paper, Typography, Divider } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport moment from \"moment\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport PieChart from \"../utils/components/charts/PieChart\";\r\nimport LineChart from \"../utils/components/charts/LineChart\";\r\nimport BarChart from \"../utils/components/charts/BarChart\";\r\nimport dummyPatients from \"../utils/components/charts/patients-data.json\";\r\nimport dummyCases from \"../utils/components/charts/bar-cases.json\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  modPaper: {\r\n    padding: theme.spacing(3, 2),\r\n    height: 200,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nconst Home = () => {\r\n  const classes = useStyles();\r\n  const [summaryCases, setSummaryCases] = useState([]);\r\n  const [time, setTime] = useState();\r\n  const [ dashboardData, setDashboardData] = useState({\r\n    confirmedCases: 0,\r\n    probableCases: 0,\r\n    suspectedCases: 0,\r\n    discharged: 0,\r\n    deaths: 0,\r\n  });\r\n\r\n  const clock = () => {\r\n    setInterval(() => {\r\n      const timeString = new Date().toLocaleTimeString(\"en-US\");\r\n      setTime(timeString);\r\n    }, 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    clock();\r\n  });\r\n\r\n  const dateTime = () => {\r\n    return (\r\n      <Grid container justify=\"center\" alignItems=\"center\" style={{ height: \"100%\" }}>\r\n        <Grid item xs={12}>\r\n          <Paper className={classes.paper} style={{ padding: \"4px 10px\" }}>\r\n            <Typography align=\"left\" variant=\"h5\" style={{ fontWeight: 600 }}>\r\n              DATE:\r\n            </Typography>\r\n            <Typography align=\"left\" variant=\"h5\">\r\n              {moment().format(\"YYYY-MM-DD\")}\r\n            </Typography>\r\n          </Paper>\r\n          <br />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Paper className={classes.paper} style={{ padding: \"4px 10px\" }}>\r\n            <Typography align=\"left\" variant=\"h5\" style={{ fontWeight: 600 }}>\r\n              TIME:\r\n            </Typography>\r\n            <Typography align=\"left\" variant=\"h5\">\r\n              {/* {moment().format(\"HH:mm:ss\")} */}\r\n              {time}\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={8}>\r\n          {/* CARDS */}\r\n          <Grid container spacing={4}>\r\n            <Grid item xs>\r\n              {dateTime()}\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper\r\n                className={classes.modPaper}\r\n                style={{ border: \"solid 2px #e04040\", color: \"#f74e4e\", height: \"100%\" }}\r\n              >\r\n                <Typography variant=\"h5\" style={{ fontWeight: 600 }}>\r\n                  CONFIRMED CASES\r\n                </Typography>\r\n                <Typography variant=\"h2\">{dashboardData.confirmedCases}</Typography>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper\r\n                className={classes.modPaper}\r\n                style={{ border: \"solid 2px #1d5f98\", color: \"#1d5f98\", height: \"100%\" }}\r\n              >\r\n                <Typography variant=\"h5\" style={{ fontWeight: 600 }}>\r\n                  PROBABLE CASES\r\n                </Typography>\r\n\r\n                <Typography variant=\"h2\">{dashboardData.probableCases}</Typography>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper\r\n                className={classes.modPaper}\r\n                style={{ border: \"solid 2px #1d5f98\", color: \"#1d5f98\", height: \"100%\" }}\r\n              >\r\n                <Typography variant=\"h5\" style={{ fontWeight: 600 }}>\r\n                  SUSPECTED CASES\r\n                </Typography>\r\n\r\n                <Typography variant=\"h2\">{dashboardData.suspectedCases}</Typography>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper\r\n                className={classes.modPaper}\r\n                style={{ border: \"solid 2px #3d98e6\", color: \"#3d98e6\", height: \"100%\" }}\r\n              >\r\n                <Typography variant=\"h5\" style={{ fontWeight: 600 }}>\r\n                  DISCHARGED\r\n                </Typography>\r\n\r\n                <Typography variant=\"h2\">{dashboardData.discharged}</Typography>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper\r\n                className={classes.modPaper}\r\n                style={{ border: \"solid 2px #000000\", color: \"#000000\", height: \"100%\" }}\r\n              >\r\n                <Typography variant=\"h5\" style={{ fontWeight: 600 }}>\r\n                  DEATHS\r\n                </Typography>\r\n\r\n                <Typography variant=\"h2\">{dashboardData.deaths}</Typography>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n          {/* Charts */}\r\n          <Grid container style={{ marginTop: \"25px\" }}>\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper} style={{ height: \"600px\" }}>\r\n                {/* <h1>GRAPH</h1> */}\r\n                <Typography className={classes.row} align=\"left\" variant=\"h4\">\r\n                  PHILIPPINE GENERAL HOSPITAL: COVID-19 CASES\r\n                </Typography>\r\n                {/* <LineChart /> */}\r\n                <BarChart data={dummyCases} />\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ marginTop: \"25px\" }}>\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper} style={{ height: \"600px\" }}>\r\n                {/* <h1>GRAPH</h1> */}\r\n                <Typography className={classes.row} align=\"left\" variant=\"h4\">\r\n                  CLASSIFIED COVID-19 PATIENTS\r\n                </Typography>\r\n                <BarChart data={dummyPatients} />\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Grid container spacing=\"3\">\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper} style={{ height: \"450px\" }}>\r\n                <Typography component=\"span\" variant=\"h4\">\r\n                  TOTAL AVAILABLE BEDS\r\n                </Typography>\r\n                <Divider variant=\"middle\" />\r\n                <PieChart />\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper} style={{ height: \"450px\" }}>\r\n                {/* <h1>GRAPH</h1> */}\r\n                <Typography component=\"span\" variant=\"h4\">\r\n                  GENDER\r\n                </Typography>\r\n                <Divider variant=\"middle\" />\r\n                <PieChart />\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper} style={{ height: \"450px\" }}>\r\n                {/* <h1>GRAPH</h1> */}\r\n                <Typography component=\"span\" variant=\"h4\">\r\n                  TOTAL ADMINISTERED TESTS\r\n                </Typography>\r\n                <Divider variant=\"middle\" />\r\n                <PieChart />\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import axios from \"axios\";\r\n\r\nconst baseDomain =\r\n  process.env.REACT_APP_ENV === \"LOCAL\"\r\n    ? process.env.REACT_APP_LOCAL\r\n    : process.env.REACT_APP_STAGING;\r\n\r\nconst baseURL = `${baseDomain}/api`;\r\n\r\nexport default axios.create({\r\n  baseURL,\r\n});\r\n","import Repository from \"./Repository\";\r\nimport _ from \"lodash\";\r\n\r\nconst resource = \"/\";\r\n\r\nexport default {\r\n  // http://206.189.87.169/PatientFullDetails/patientid\r\n  getPatient(patientId) {\r\n    return Repository.get(`/PatientFullDetails/${patientId}`);\r\n  },\r\n  getPatients() {\r\n    return Repository.get(`/getpatientlist`);\r\n  },\r\n  createPatient(payload) {\r\n    return Repository.post(`/addpatientapi`, payload);\r\n  },\r\n  deletePatient(id) {\r\n    const formData = new FormData();\r\n    formData.append(\"patientid\", id);\r\n    return Repository.post(`/deletePatient`, formData);\r\n  },\r\n  updatePatient(payload) {\r\n    return Repository.post(`/updatePatient`, payload);\r\n  },\r\n  getPatientConfig(id) {\r\n    return Repository.get(`/PatientConfig/${id}`);\r\n  },\r\n  addPatientConfig(payload) {\r\n    const formData = new FormData();\r\n    for (let [key, value] of Object.entries(payload)) {\r\n      if (typeof value === \"undefined\") {\r\n        value = \"\";\r\n      }\r\n      if (typeof value === \"string\") {\r\n        value = value.trim();\r\n      }\r\n      formData.append(key, value);\r\n    }\r\n    return Repository.post(`/addPatientConfig`, formData);\r\n  },\r\n  createDefaultPatientConfig(patientId) {\r\n    const defaultConfig = {\r\n      ecg_st_msec: \"\",\r\n      heartrate_upper_bpm: 100,\r\n      heartrate_lower_bpm: 50,\r\n      pulserate_upper_bpm: 100,\r\n      pulserate_lower_bpm: 50,\r\n      oxygen_upper_saturation: 100,\r\n      oxygen_lower_saturation: 94,\r\n      respiratory_upper_rpm: 20,\r\n      respiratory_lower_rpm: 12,\r\n      bp_systolic_upper: 120,\r\n      bp_systolic_lower: 90,\r\n      bp_diastolic_upper: 80,\r\n      bp_diastolic_lower: 60,\r\n      bp_time_frame: 30,\r\n      temperature_upper: 42.0,\r\n      temperature_lower: 35.8,\r\n    };\r\n    this.addPatientConfig({ patientid: patientId, ...defaultConfig });\r\n  },\r\n  getPatientObservation(payload) {\r\n    const formData = new FormData();\r\n    for (let [key, value] of Object.entries(payload)) {\r\n      if (typeof value === \"undefined\") {\r\n        value = \"\";\r\n      }\r\n      if (typeof value === \"string\") {\r\n        value = value.trim();\r\n      }\r\n      formData.append(key, value);\r\n    }\r\n    return Repository.post(`/getPatientRangedObservation`, formData);\r\n  },\r\n\r\n  getLivePatientObservation() {\r\n    return Repository.get(`/getPatientObservation`);\r\n  },\r\n  \r\n  async getAllObservation(payload) {\r\n    const observationList = [\r\n      {\r\n        id: \"heart_rate\",\r\n        name: \"HEART RATE\",\r\n        legend: \"HR\",\r\n        code: \"76282-3\",\r\n      },\r\n      {\r\n        id: \"pulse_rate\",\r\n        name: \"PULSE RATE\",\r\n        legend: \"PR\",\r\n        code: \"8889-8\",\r\n      },\r\n      {\r\n        id: \"spo2\",\r\n        name: \"SPO2\",\r\n        legend: \"%\",\r\n        code: \"59407-7\",\r\n      },\r\n      {\r\n        id: \"respiratory_rate\",\r\n        name: \"RESPIRATORY RATE\",\r\n        legend: \"RR\",\r\n        code: \"76270-8\",\r\n      },\r\n      {\r\n        name: \"BLOOD PRESSURE\",\r\n        data: [\r\n          {\r\n            legend: \"SYSTOLIC\",\r\n            code: \"8480-6\",\r\n          },\r\n          {\r\n            legend: \"DIASTOLIC\",\r\n            code: \"8462-4\",\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        id: \"map\",\r\n        legend: \"MAP\",\r\n        code: \"8478-0\",\r\n      },\r\n      {\r\n        id: \"temperature\",\r\n        name: \"TEMPERATURE\",\r\n        legend: \"CELSIUS\",\r\n        code: \"8310-5\",\r\n      },\r\n    ];\r\n    console.log('test');\r\n    const tableData = {\r\n      \"00\": {key: \"00\", time: \"12:00 AM\"},\r\n      \"01\": {key: \"01\", time: \"1:00 AM\"},\r\n      \"02\": {key: \"02\", time: \"2:00 AM\"},\r\n      \"03\": {key: \"03\", time: \"3:00 AM\"},\r\n      \"04\": {key: \"04\", time: \"4:00 AM\"},\r\n      \"05\": {key: \"05\", time: \"5:00 AM\"},\r\n      \"06\": {key: \"06\", time: \"6:00 AM\"},\r\n      \"07\": {key: \"07\", time: \"7:00 AM\"},\r\n      \"08\": {key: \"08\", time: \"8:00 AM\"},\r\n      \"09\": {key: \"09\", time: \"9:00 AM\"},\r\n      10: {key: \"10\", time: \"10:00 AM\"},\r\n      11: {key: \"11\", time: \"11:00 AM\"},\r\n      12: {key: \"12\", time: \"12:00 PM\"},\r\n      13: {key: \"13\", time: \"1:00 PM\"},\r\n      14: {key: \"14\", time: \"2:00 PM\"},\r\n      15: {key: \"15\", time: \"3:00 PM\"},\r\n      16: {key: \"16\", time: \"4:00 PM\"},\r\n      17: {key: \"17\", time: \"5:00 PM\"},\r\n      18: {key: \"18\", time: \"6:00 PM\"},\r\n      19: {key: \"19\", time: \"7:00 PM\"},\r\n      20: {key: \"20\", time: \"8:00 PM\"},\r\n      21: {key: \"21\", time: \"9:00 PM\"},\r\n      22: {key: \"22\", time: \"10:00 PM\"},\r\n      23: {key: \"23\", time: \"11:00 PM\"},\r\n    };\r\n    const { spec_date, patientid } = payload;\r\n    await Promise.all(observationList.map(async el => {\r\n      const formData = new FormData();\r\n      formData.append(\"spec_date\", spec_date);\r\n      formData.append(\"patientid\", patientid);\r\n      if (!_.isEmpty(el.code)) {\r\n        formData.append(\"obscode\", el.code);\r\n        const { data } = await Repository.post(`/getPatientRangedObservation`, formData);\r\n        const obs = data.PatientRangedObservation;\r\n        // let updatedTableData = _.cloneDeep(tableData);\r\n\r\n        obs.map(e => {\r\n          tableData[e.hour_clustered] = Object.assign(tableData[e.hour_clustered], {[el.id]: e.avg_value});\r\n        });\r\n      }\r\n    }));\r\n    const updatedTableData = Object.values(tableData);\r\n    const parsedData = _.sortBy(updatedTableData, [function(o) { return o.key; }]);\r\n    return parsedData;\r\n  }\r\n};\r\n","import Repository from \"./Repository\";\r\nimport {v4 as uuid} from \"uuid\"\r\n\r\nconst resource = \"/\";\r\n\r\nexport default {\r\n  getMonitor(monitorId) {\r\n\r\n  },\r\n\r\n  getMonitorWithPatient(patientId) {\r\n    return Repository.get(`/monitorWithPatient/${patientId}`);\r\n  },\r\n\r\n  getMonitorsWithPatient() {\r\n    return Repository.post(\"/get_monitor\");\r\n  },\r\n\r\n  addMonitor() {\r\n    const formData = new FormData();\r\n    const id = uuid().slice(0,5);\r\n    formData.append(\"monitorname\", `Monitor-${id}`);\r\n    formData.append(\"monitordesc\", \"\");\r\n    formData.append(\"wardid\", 1);\r\n    formData.append(\"maxslot\", 0);\r\n    return Repository.post(\"/create_monitor\", formData);\r\n  },\r\n\r\n  deleteMonitor(monitorId) {\r\n    const formData = new FormData();\r\n    formData.append(\"monitorid\", monitorId);\r\n    return Repository.post(\"/delete_monitor\", formData);\r\n  },\r\n\r\n  addPatientToMonitor(patientId, monitorId) {\r\n    const formData = new FormData();\r\n    formData.append(\"monitorid\", monitorId);\r\n    formData.append(\"slotnumber\", 1);\r\n    formData.append(\"patientid\", patientId);\r\n    return Repository.post(\"/add_patient_toMonitor\", formData);\r\n  },\r\n\r\n  removePatientFromMonitor(patientId, monitorId) {\r\n    const formData = new FormData();\r\n    formData.append(\"monitorid\", monitorId);\r\n    formData.append(\"patientid\", patientId);\r\n    return Repository.post(\"/remove_patient_toMonitor\", formData);\r\n  },\r\n\r\n  incrementPatientSlot(payload) {\r\n    const { patientSlot, id: monitorId, description, name } = payload;\r\n    const formData = new FormData();\r\n    formData.append(\"monitorid\", monitorId);\r\n    formData.append(\"monitordesc\", description);\r\n    formData.append(\"monitorname\", name);\r\n    formData.append(\"maxslot\", patientSlot + 1);\r\n    formData.append(\"wardid\", 1);\r\n\r\n    return Repository.post(\"/update_monitor\", formData)\r\n  },\r\n\r\n  decrementPatientSlot(payload) {\r\n    const { patientSlot, id: monitorId, description, name } = payload;\r\n    const formData = new FormData();\r\n    formData.append(\"monitorid\", monitorId);\r\n    formData.append(\"monitordesc\", description);\r\n    formData.append(\"monitorname\", name);\r\n    formData.append(\"maxslot\", patientSlot - 1);\r\n    formData.append(\"wardid\", 1);\r\n    return Repository.post(\"/update_monitor\", formData);\r\n  },\r\n\r\n  requestBP(patientid) {\r\n    const formData = new FormData();\r\n    formData.append(\"patientid\", patientid);\r\n    return Repository.post(\"/requestBP\", formData);\r\n  },\r\n  getRequestBPValue(requestid) {\r\n    const formData = new FormData();\r\n    formData.append(\"requestid\", requestid);\r\n    return Repository.post(\"/getRequestBPValue \", formData);\r\n  },\r\n\r\n  async updateMonitor(payload) {\r\n    const { patientSlot, id: monitorId, description, name } = payload;\r\n    const formData = new FormData();\r\n    formData.append(\"monitorid\", monitorId);\r\n    formData.append(\"monitordesc\", description);\r\n    formData.append(\"monitorname\", name);\r\n    formData.append(\"maxslot\", patientSlot);\r\n    formData.append(\"wardid\", 1);\r\n    try {\r\n      const response = await Repository.post(\"/update_monitor\", formData);\r\n      return response;\r\n    } catch (e) {\r\n      if (e) {\r\n        return e;\r\n      }\r\n    }\r\n  }\r\n};\r\n","import Repository from \"./Repository\";\r\n\r\nconst resource = \"/\";\r\n\r\nexport default {\r\n  createWard(payload) {\r\n    const formData = new FormData();\r\n    for (let [key, value] of Object.entries(payload)) {\r\n      if (typeof value === \"undefined\") {\r\n        value = \"\";\r\n      }\r\n      formData.append(key, value);\r\n    }\r\n    Repository.post(\"/create_ward\", formData);\r\n  },\r\n  updateWard(payload) {\r\n    const formData = new FormData();\r\n    for (let [key, value] of Object.entries(payload)) {\r\n      if (typeof value === \"undefined\") {\r\n        value = \"\";\r\n      }\r\n      formData.append(key, value);\r\n    }\r\n    Repository.post(\"/update_ward\", formData);\r\n  },\r\n  deleteWard(wardId) {\r\n    const formData = new FormData();\r\n    formData.append(\"wardid\", wardId);\r\n    Repository.post(\"/delete_ward\", formData);\r\n  }\r\n};\r\n","import Repository from \"./Repository\";\r\n\r\nconst resource = \"/\";\r\n\r\nexport default {\r\n  getPatientClassification() {\r\n    return Repository.get(\"/filter_statuscode?statuscode=Classification\");\r\n  },\r\n  getPatientCovidCase() {\r\n    return Repository.get(\"/filter_statuscode?statuscode=Covid Case\");\r\n  },\r\n  getPatientAdmissionStatus() {\r\n    return Repository.get(\"/filter_statuscode?statuscode=Admission Status\");\r\n  }\r\n};\r\n","import PatientRepository from \"./patientRepository\";\r\nimport MonitorRepository from \"./monitorRepository\";\r\nimport WardRepository from \"./wardRepository\";\r\nimport TelemetryRepository from \"./telemetryRepository\";\r\nimport StatuscodesRepository from \"./statuscodesRepository\";\r\n\r\nconst repositories = {\r\n  patient: PatientRepository,\r\n  monitor: MonitorRepository,\r\n  ward: WardRepository,\r\n  telemetry: TelemetryRepository,\r\n  statuscodes: StatuscodesRepository,\r\n};\r\n\r\nexport const RepositoryFactory = {\r\n  get: (name) => repositories[name],\r\n};\r\n","import React, { Component, useState, useEffect } from 'react'\r\nimport range from 'lodash/range'\r\nimport last from 'lodash/last'\r\nimport { generateDrinkStats } from '@nivo/generators'\r\nimport { ResponsiveLine } from '@nivo/line'\r\nimport { Defs } from '@nivo/core'\r\nimport { area, curveMonotoneX } from 'd3-shape'\r\nimport * as time from 'd3-time'\r\nimport { timeFormat } from 'd3-time-format'\r\nconst data = generateDrinkStats(18)\r\n\r\nconst commonProperties = {\r\n  width: 550,\r\n  height: 80,\r\n  // margin: { top: 20, right: 20, bottom: 60, left: 80 },\r\n  data,\r\n  animate: true,\r\n  enableSlices: 'x',\r\n}\r\nclass RealTimeChart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const date = new Date();\r\n    date.setMinutes(0);\r\n    date.setSeconds(0);\r\n    date.setMilliseconds(0);\r\n\r\n    this.state = {\r\n      dataA: range(100).map((i) => ({\r\n        x: time.timeMinute.offset(date, i * 30),\r\n        y: 30 + Math.round(Math.random() * 20),\r\n      })),\r\n      // dataB: range(100).map((i) => ({\r\n      //   x: time.timeMinute.offset(date, i * 30),\r\n      //   y: 30 + Math.round(Math.random() * 20),\r\n      // })),\r\n      // dataC: range(100).map((i) => ({\r\n      //   x: time.timeMinute.offset(date, i * 30),\r\n      //   y: 60 + Math.round(Math.random() * 20),\r\n      // })),\r\n    };\r\n\r\n    this.formatTime = timeFormat(\"%Y %b %d\");\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(this.next, 100);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  next = () => {\r\n    const dataA = this.state.dataA.slice(1);\r\n    dataA.push({\r\n      x: time.timeMinute.offset(last(dataA).x, 30),\r\n      y: 10 + Math.round(Math.random() * 60),\r\n    });\r\n    // const dataB = this.state.dataB.slice(1);\r\n    // dataB.push({\r\n    //   x: time.timeMinute.offset(last(dataB).x, 30),\r\n    //   y: 30 + Math.round(Math.random() * 20),\r\n    // });\r\n    // const dataC = this.state.dataC.slice(1);\r\n    // dataC.push({\r\n    //   x: time.timeMinute.offset(last(dataC).x, 30),\r\n    //   y: 60 + Math.round(Math.random() * 20),\r\n    // });\r\n\r\n    // this.setState({ dataA, dataB, dataC });\r\n    this.setState({ dataA });\r\n  };\r\n\r\n  render() {\r\n    const { dataA, dataB, dataC } = this.state;\r\n\r\n    return (\r\n      <ResponsiveLine\r\n        {...commonProperties}\r\n        // margin={{ top: 30, right: 50, bottom: 60, left: 50 }}\r\n        data={[\r\n          { id: \"A\", data: dataA },\r\n          // { id: \"B\", data: dataB },\r\n          // { id: \"C\", data: dataC },\r\n        ]}\r\n        xScale={{ type: \"time\", format: \"native\" }}\r\n        yScale={{ type: \"linear\", max: 100 }}\r\n        axisTop={null}\r\n        // axisTop={{\r\n        //   format: \"%H:%M\",\r\n        //   tickValues: \"every 4 hours\",\r\n        // }}\r\n        // axisBottom={{\r\n        //   format: \"%H:%M\",\r\n        //   tickValues: \"every 4 hours\",\r\n        //   legend: `${this.formatTime(dataA[0].x)} ——— ${this.formatTime(last(dataA).x)}`,\r\n        //   legendPosition: \"middle\",\r\n        //   legendOffset: 46,\r\n        // }}\r\n        axisBottom={null}\r\n        axisRight={null}\r\n        enablePoints={false}\r\n        enableGridX={true}\r\n        curve=\"monotoneX\"\r\n        animate={false}\r\n        motionStiffness={120}\r\n        motionDamping={50}\r\n        isInteractive={false}\r\n        enableSlices={false}\r\n        useMesh={true}\r\n        theme={{\r\n          axis: { ticks: { text: { fontSize: 14 } } },\r\n          grid: { line: { stroke: \"#ddd\", strokeDasharray: \"1 2\" } },\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default RealTimeChart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\r\nimport {\r\n  makeStyles,\r\n  createMuiTheme,\r\n  responsiveFontSizes,\r\n  ThemeProvider,\r\n} from \"@material-ui/core/styles\";\r\nimport _ from \"lodash\";\r\nimport clsx from \"clsx\";\r\nimport { RepositoryFactory } from \"../../../api/repositories/RepositoryFactory\";\r\nimport moment from \"moment\";\r\nimport Chart from \"./RTChart\";\r\n\r\nconst PatientRepository = RepositoryFactory.get(\"patient\");\r\n\r\nlet theme = createMuiTheme({\r\n  // typography: {\r\n  //   h2: {\r\n  //     fontSize: '3rem',\r\n  //     '@media (min-width:600px)': {\r\n  //       fontSize: '3.75rem',\r\n  //     },\r\n  //   }\r\n  // },\r\n});\r\ntheme = responsiveFontSizes(theme);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    // padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    // color: theme.palette.text.secondary,\r\n    color: \"white\",\r\n    backgroundColor: \"#222222\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  bordered: {\r\n    borderBottom: \"solid 2px white\",\r\n  },\r\n  ecg: {\r\n    color: \"#76db3d\",\r\n  },\r\n  spo2: {\r\n    color: \"#17eaf1\",\r\n  },\r\n  resp: {\r\n    color: \"#f6f830\",\r\n  },\r\n  error: {\r\n    color: \"#db1e1e\",\r\n  },\r\n  TelemetryCard: {\r\n    border: \"2px solid white\",\r\n  },\r\n  overflowText: {\r\n    whiteSpace: \"nowrap\",\r\n    overflow: \"hidden\",\r\n    textOverflow: \"ellipsis\",\r\n  },\r\n}));\r\n\r\nconst TelemetryCard = (props) => {\r\n  const { patient, rxbox } = props;\r\n  const classes = useStyles();\r\n  const [time, setTime] = useState(moment().format(\"HH:mm\"));\r\n  const [chartHeight] = useState(\"80px\");\r\n  const [patientConfig, setPatientConfig] = useState({});\r\n  const [issue, setIssue] = useState(false);\r\n  const [errors, setErrors] = useState({\r\n    ecg: true,\r\n    spo2: false,\r\n    rr: false,\r\n    temp: false,\r\n    pr: false,\r\n    bp: false,\r\n  });\r\n  const [code] = useState({\r\n    ecg: \"76282-3\",\r\n    spo2: \"59407-7\",\r\n    primary_rr: \"76270-8\",\r\n    secondary_rr: \"76171-8\",\r\n    temp: \"8310-5\",\r\n    hr: \"76282-3\",\r\n    pr: \"8889-8\",\r\n    bp: \"131328\",\r\n    systolic_bp: \"8480-6\",\r\n    diastolic_bp: \"8462-4\",\r\n    mean_arterial_pressure: \"8478-0\",\r\n  });\r\n\r\n  const getPatientConfig = async (id) => {\r\n    if (id) {\r\n      /* Query to get patient */\r\n      try {\r\n        const { data } = await PatientRepository.getPatientConfig(id);\r\n        if (data.length > 0) {\r\n          console.log(data[0]);\r\n          setPatientConfig(data[0]);\r\n        }\r\n      } catch (e) {\r\n        alert(\"No patient config\");\r\n        console.log(e);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getECG = () => {\r\n    // heart rate\r\n    const index = _.findIndex(rxbox, function (o) {\r\n      return o.tpo_code === code.ecg;\r\n    });\r\n    if (index >= 0) {\r\n      const { tpo_value } = rxbox[index];\r\n\r\n      return tpo_value;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const getBP = () => {\r\n    let index;\r\n    const systolicIndex = _.findIndex(rxbox, function (o) {\r\n      return o.tpo_code === code.systolic_bp;\r\n    });\r\n\r\n    const diastolicIndex = _.findIndex(rxbox, function (o) {\r\n      return o.tpo_code === code.diastolic_bp;\r\n    });\r\n\r\n    const systolicVal = systolicIndex >= 0 ? rxbox[systolicIndex].tpo_value : null;\r\n    const diastolicVal = diastolicIndex >= 0 ? rxbox[diastolicIndex].tpo_value : null;\r\n    if (!_.isEmpty(systolicVal) && !_.isEmpty(diastolicVal)) {\r\n      return `${systolicVal}/${diastolicVal}`;\r\n    }\r\n    // if (index >= 0) {\r\n    //   return rxbox[index].tpo_value;\r\n    // }\r\n    return null;\r\n  };\r\n\r\n  // const getHR = () => {\r\n  //   const index = _.findIndex(rxbox, function (o) {\r\n  //     return o.tpo_code === code.hr;\r\n  //   });\r\n  //   if (index >= 0) {\r\n  //     return rxbox[index].tpo_value;\r\n  //   }\r\n  //   return null;\r\n\r\n  // };\r\n\r\n  const getTemp = () => {\r\n    const index = _.findIndex(rxbox, function (o) {\r\n      return o.tpo_code === code.temp;\r\n    });\r\n    if (index >= 0) {\r\n      const { tpo_value } = rxbox[index];\r\n      return tpo_value;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const getRR = () => {\r\n    const index = _.findIndex(rxbox, function (o) {\r\n      return o.tpo_code === code.primary_rr;\r\n    });\r\n\r\n    const secondaryIndex = _.findIndex(rxbox, function (o) {\r\n      return o.tpo_code === code.secondary_rr;\r\n    });\r\n\r\n    if (index >= 0) {\r\n      const { tpo_value } = rxbox[index];\r\n      return tpo_value;\r\n    }\r\n    if (secondaryIndex >= 0) {\r\n      const { tpo_value } = rxbox[secondaryIndex];\r\n      return tpo_value;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const getSpo2 = () => {\r\n    const index = _.findIndex(rxbox, function (o) {\r\n      return o.tpo_code === code.spo2;\r\n    });\r\n    if (index >= 0) {\r\n      const { tpo_value } = rxbox[index];\r\n      return tpo_value;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const getPulseRate = () => {\r\n    const index = _.findIndex(rxbox, function (o) {\r\n      return o.tpo_code === code.pr;\r\n    });\r\n    if (index >= 0) {\r\n      const { tpo_value } = rxbox[index];\r\n      return tpo_value;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const getTime = () => {\r\n    const index = _.findIndex(rxbox, function (o) {\r\n      return o.tpo_code === code.mean_arterial_pressure;\r\n    });\r\n    if (index >= 0) {\r\n      setTime(moment(rxbox[index].tpo_effectivity).local().format(\"HH:mm\"));\r\n    }\r\n  };\r\n\r\n  const getMAP = () => {\r\n    const index = _.findIndex(rxbox, function (o) {\r\n      return o.tpo_code === code.mean_arterial_pressure;\r\n    });\r\n    if (index >= 0) {\r\n      // setTime(moment(rxbox[index].tpo_effectivity).format(\"HH:mm\"));\r\n      return rxbox[index].tpo_value;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const getNameDetails = () => {\r\n    const middleInitial = patient.rpi_patientmname[0] ? patient.rpi_patientmname[0] + \".\" : \"\";\r\n    const name = `${patient.rpi_patientfname || \"\"} ${\r\n      patient.rpi_patientlname || \"\"\r\n    } ${middleInitial}`.toUpperCase();\r\n    return `${name}`;\r\n  };\r\n\r\n  const validateRxboxConfig = () => {\r\n    if (!_.isEmpty(patientConfig)) {\r\n      const err = { ...errors };\r\n      const {\r\n        rpc_bp_systolic_lower,\r\n        rpc_bp_systolic_upper,\r\n        rpc_bp_diastolic_upper,\r\n        rpc_bp_diastolic_lower,\r\n        rpc_temperature_lower, \r\n        rpc_temperature_upper,\r\n        rpc_respiratory_lower_rpm, rpc_respiratory_upper_rpm,\r\n        rpc_oxygen_lower_saturation, rpc_oxygen_upper_saturation,\r\n        rpc_pulserate_lower_bpm, rpc_pulserate_upper_bpm\r\n      } = patientConfig;\r\n      err.temp = false;\r\n      err.bp = false;\r\n      err.rr = false;\r\n      err.spo2 = false;\r\n      err.pr = false;\r\n\r\n\r\n      const tempValue = getTemp();\r\n      const respValue = getRR();\r\n      const spo2Value = getSpo2();\r\n      const bpValue = getBP();\r\n      const prValue = getPulseRate();\r\n\r\n      if (tempValue) {\r\n        if (tempValue > rpc_temperature_upper || tempValue < rpc_temperature_lower) {\r\n          // error\r\n          err.temp = true;\r\n        }\r\n      }\r\n\r\n      if (respValue) {\r\n        if (respValue > rpc_respiratory_upper_rpm || respValue < rpc_respiratory_lower_rpm) {\r\n          // error\r\n          err.rr = true;\r\n        }\r\n      }\r\n\r\n      if (spo2Value) {\r\n        if (spo2Value > rpc_oxygen_upper_saturation || spo2Value < rpc_oxygen_lower_saturation) {\r\n          // error\r\n          err.spo2 = true;\r\n        }\r\n      }\r\n\r\n      if (bpValue) {\r\n        const [systolicVal, diastolicVal] = bpValue.split(\"/\");\r\n        if (systolicVal > rpc_bp_systolic_upper || systolicVal < rpc_bp_systolic_lower) {\r\n          // error\r\n          err.bp = true;\r\n        }\r\n        if (diastolicVal > rpc_bp_diastolic_upper || diastolicVal < rpc_bp_diastolic_lower) {\r\n          // error\r\n          err.bp = true;\r\n        }\r\n      }\r\n\r\n      if (prValue) {\r\n        if (prValue > rpc_pulserate_upper_bpm || prValue < rpc_pulserate_lower_bpm) {\r\n          // error\r\n          err.pr = true;\r\n        }\r\n      }\r\n      setErrors(err);\r\n    }\r\n  };\r\n\r\n  const isError = (type) => {\r\n    if (type) {\r\n      const data = { ...errors };\r\n      return data[type];\r\n    }\r\n  };\r\n\r\n  const setStyle = (type) => {\r\n    const style = { color: \"#a9a99d\" };\r\n    switch (type) {\r\n      case \"ecg\":\r\n        if (getECG()) {\r\n          style.margin = \"auto\";\r\n          style.color = \"#76db3d\";\r\n          if (isError(type)) {\r\n            style.color = \"#db1e1e\";\r\n          }\r\n        }\r\n        break;\r\n      case \"pr\":\r\n        if (getPulseRate()) {\r\n          style.margin = \"auto\";\r\n          style.color = \"#17eaf1\";\r\n          if (isError(type)) {\r\n            style.color = \"#db1e1e\";\r\n          }\r\n        }\r\n        break;\r\n      case \"spo2\":\r\n        if (getSpo2()) {\r\n          style.margin = \"auto\";\r\n          style.color = \"#17eaf1\";\r\n          if (isError(type)) {\r\n            style.color = \"#db1e1e\";\r\n          }\r\n        }\r\n        break;\r\n      case \"bp\":\r\n        if (getBP() && getMAP()) {\r\n          style.margin = \"auto\";\r\n          if (isError(type)) {\r\n            style.color = \"#db1e1e\";\r\n          }\r\n        }\r\n        break;\r\n      case \"rr\":\r\n        if (getRR()) {\r\n          style.margin = \"auto\";\r\n          style.color = \"#f6f830\";\r\n          if (isError(type)) {\r\n            style.color = \"#db1e1e\";\r\n          }\r\n        }\r\n        break;\r\n      case \"temp\":\r\n        if (getTemp()) {\r\n          style.margin = \"auto\";\r\n          if (isError(type)) {\r\n            style.color = \"#db1e1e\";\r\n          }\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return style;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (patient) {\r\n      getPatientConfig(patient.rpi_patientid);\r\n    }\r\n  }, [patient]);\r\n\r\n  useEffect(() => {\r\n    validateRxboxConfig();\r\n    getTime();\r\n  }, [rxbox]);\r\n\r\n  useEffect(() => {\r\n    if (errors) {\r\n      const arr = _.some(errors, true);\r\n      if (arr) {\r\n        setIssue(true);\r\n      } else {\r\n        setIssue(false);\r\n      }\r\n    }\r\n  }, [errors]);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Paper className={clsx(classes.paper, classes.TelemetryCard)}>\r\n        <Grid\r\n          container\r\n          className={classes.bordered}\r\n          style={issue ? { backgroundColor: \"#db1e1e\" } : {}}\r\n        >\r\n          <Grid item xs={1}>\r\n            <Typography variant=\"h5\">B#{patient.rpi_bednumber || \"--\"}</Typography>\r\n          </Grid>\r\n          <Grid item xs={6} align=\"left\">\r\n            <div>\r\n              <Typography display=\"inline\" variant=\"h5\" className={classes.overflowText}>\r\n                {/* {`${patient.rpi_patientfname} ${patient.rpi_patientlname}` || \"NO NAME\"}{\" \"} */}\r\n                {getNameDetails()}\r\n              </Typography>\r\n              <Typography display=\"inline\" variant=\"h5\" className={classes.overflowText}>\r\n                {/* {`${patient.rpi_patientfname} ${patient.rpi_patientlname}` || \"NO NAME\"}{\" \"} */}\r\n                {`/${patient.rpi_age || \"-\"} /${patient.rpi_gender[0].toUpperCase()}`}\r\n              </Typography>\r\n            </div>\r\n          </Grid>\r\n          {/* <Grid item xs={2} /> */}\r\n          <Grid item xs={5} align=\"right\" className={classes.overflowText}>\r\n            <Typography variant=\"h5\">{patient.rpi_covid19 || \"--\"}</Typography>\r\n          </Grid>\r\n\r\n          {/* <Grid item xs={3} align=\"right\">\r\n            <Typography variant=\"subtitle2\">{patient.rpi_covid19 || \"--\"}</Typography>\r\n            <Typography variant=\"subtitle2\">{patient.rpi_bednumber || \"--\"}</Typography>\r\n          </Grid> */}\r\n        </Grid>\r\n        {/* ECG Row */}\r\n        <Grid container style={{ height: chartHeight }}>\r\n          <Grid item xs={8}>\r\n            {/* <Chart height={chartHeight} /> */}\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={2}\r\n            className={classes.ecg}\r\n            // style={getECG() ? {} : { margin: \"auto\", color: \"#a9a99d\" }}\r\n            style={setStyle(\"ecg\")}\r\n          >\r\n            {getECG() ? (\r\n              <>\r\n                <Grid container>\r\n                  <Grid item xs={6} align=\"left\">\r\n                    <Typography align=\"left\" variant=\"subtitle2\" display=\"initial\">\r\n                      ECG (BPM)\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={6} align=\"right\">\r\n                    <Typography align=\"right\" variant=\"caption\" display=\"initial\">\r\n                      HR\r\n                      <span aria-label=\"heart-emoji\" role=\"img\">\r\n                        ❤️\r\n                      </span>\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Typography align=\"right\" variant=\"h2\">\r\n                  {getECG() || \"--\"}\r\n                </Typography>\r\n              </>\r\n            ) : (\r\n              <Typography align=\"center\" variant=\"h5\">\r\n                NO DATA\r\n              </Typography>\r\n            )}\r\n            {/* <Typography align=\"left\" variant=\"subtitle2\">\r\n              ECG (BPM)\r\n            </Typography>\r\n            <Typography align=\"right\" variant=\"h2\">\r\n              {getECG() || \"67\"}\r\n            </Typography> */}\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={2}\r\n            className={classes.spo2}\r\n            // style={getPulseRate() ? {} : { margin: \"auto\", color: \"#a9a99d\" }}\r\n            style={setStyle(\"pr\")}\r\n          >\r\n            {getPulseRate() ? (\r\n              <>\r\n                <Typography align=\"right\" variant=\"subtitle2\">\r\n                  PR\r\n                </Typography>\r\n                <Typography align=\"right\" variant=\"h3\">\r\n                  {getPulseRate() || \"43\"}\r\n                </Typography>\r\n              </>\r\n            ) : (\r\n              <Typography align=\"center\" variant=\"h5\">\r\n                NO DATA\r\n              </Typography>\r\n            )}\r\n            {/* <Typography align=\"right\" variant=\"subtitle2\">\r\n              PR\r\n            </Typography>\r\n            <Typography align=\"right\" variant=\"h3\">\r\n              {getPulseRate() || \"43\"}\r\n            </Typography> */}\r\n          </Grid>\r\n        </Grid>\r\n        {/* SpO Row */}\r\n        <Grid container style={{ height: chartHeight }}>\r\n          <Grid item xs={8}>\r\n            {/* <Chart height={chartHeight} /> */}\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={2}\r\n            className={classes.spo2}\r\n            // style={getSpo2() ? {} : { margin: \"auto\", color: \"#a9a99d\" }}\r\n            style={setStyle(\"spo2\")}\r\n          >\r\n            {getSpo2() ? (\r\n              <>\r\n                <Typography align=\"left\" variant=\"subtitle2\">\r\n                  SpO\r\n                  <sub>2</sub>\r\n                  (%)\r\n                </Typography>\r\n                <Typography align=\"right\" variant=\"h2\">\r\n                  {getSpo2()}\r\n                </Typography>\r\n              </>\r\n            ) : (\r\n              <Typography align=\"center\" variant=\"h5\">\r\n                NO DATA\r\n              </Typography>\r\n            )}\r\n            {/* <Typography align=\"left\" variant=\"subtitle2\">\r\n              SpO<sub>2</sub> (%)\r\n            </Typography>\r\n            <Typography align=\"right\" variant=\"h2\">\r\n              {getSpo2() || \"98\"}\r\n            </Typography> */}\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={2}\r\n            // style={getMAP() && getBP() ? {} : { margin: \"auto\", color: \"#a9a99d\" }}\r\n            style={setStyle(\"bp\")}\r\n          >\r\n            {getMAP() && getBP() ? (\r\n              <>\r\n                <Grid container>\r\n                  <Grid item align=\"left\" xs={7}>\r\n                    <Typography align=\"left\" variant=\"caption\">\r\n                      NIBP @{time}\r\n                      <Typography variant=\"caption\" style={{ display: \"block\" }}>\r\n                        {\" \"}\r\n                        mmhg\r\n                      </Typography>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item align=\"right\" xs={5}>\r\n                    <Typography align=\"right\" variant=\"caption\">\r\n                      MAP{\" \"}\r\n                      <Typography variant=\"caption\" style={{ display: \"block\" }}>\r\n                        {getMAP() || \"--\"}\r\n                      </Typography>\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Typography\r\n                  align={getBP() ? \"right\" : \"center\"}\r\n                  variant={getBP() ? \"h4\" : \"h5\"}\r\n                  style={getBP() ? {} : { color: \"#a9a99d\" }}\r\n                >\r\n                  {getBP() || \"No Data\"}\r\n                </Typography>\r\n              </>\r\n            ) : (\r\n              <Typography align=\"center\" variant=\"h5\">\r\n                NO DATA\r\n              </Typography>\r\n            )}\r\n            {/* <Grid container>\r\n              <Grid item align=\"left\" xs={6}>\r\n                <Typography align=\"left\" variant=\"caption\">\r\n                  NIBP @8:15\r\n                  <Typography variant=\"caption\" style={{ display: \"block\" }}>\r\n                    {\" \"}\r\n                    mmhg\r\n                  </Typography>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item align=\"right\" xs={6}>\r\n                <Typography align=\"right\" variant=\"caption\">\r\n                  MAP{\" \"}\r\n                  <Typography variant=\"caption\" style={{ display: \"block\" }}>\r\n                    {getMAP() || \"--\"}\r\n                  </Typography>\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Typography\r\n              align={getBP() ? \"right\" : \"center\"}\r\n              variant={getBP() ? \"h4\" : \"h5\"}\r\n              style={getBP() ? {} : { color: \"#a9a99d\" }}\r\n            >\r\n              {getBP() || \"No Data\"}\r\n            </Typography> */}\r\n          </Grid>\r\n        </Grid>\r\n        {/* RESP Row */}\r\n        <Grid container style={{ height: chartHeight }}>\r\n          <Grid item xs={8}>\r\n            {/* <Chart height={chartHeight} /> */}\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={2}\r\n            className={classes.resp}\r\n            // style={getRR() ? {} : { margin: \"auto\", color: \"#a9a99d\" }}\r\n            style={setStyle(\"rr\")}\r\n          >\r\n            {getRR() ? (\r\n              <>\r\n                <Typography align=\"left\" variant=\"subtitle2\">\r\n                  RESP (RPM)\r\n                </Typography>\r\n                <Typography align=\"right\" variant=\"h2\">\r\n                  {getRR()}\r\n                </Typography>\r\n              </>\r\n            ) : (\r\n              <Typography align=\"center\" variant=\"h5\">\r\n                NO DATA\r\n              </Typography>\r\n            )}\r\n            {/* <Typography align=\"left\" variant=\"subtitle2\">\r\n              RESP (RPM)\r\n            </Typography>\r\n            <Typography align=\"right\" variant=\"h2\">\r\n              {getRR() || \"30\"}\r\n            </Typography> */}\r\n          </Grid>\r\n\r\n          <Grid\r\n            item\r\n            xs={2}\r\n            // style={getTemp() ? {} : { margin: \"auto\", color: \"#a9a99d\" }}\r\n            style={setStyle(\"temp\")}\r\n          >\r\n            {getTemp() ? (\r\n              <>\r\n                <Typography align=\"left\" variant=\"subtitle2\">\r\n                  TEMP C\r\n                </Typography>\r\n                <Typography align=\"right\" variant=\"h3\">\r\n                  {getTemp()}\r\n                </Typography>\r\n              </>\r\n            ) : (\r\n              <Typography align=\"center\" variant=\"h5\">\r\n                NO DATA\r\n              </Typography>\r\n            )}\r\n            {/* <Typography align=\"left\" variant=\"subtitle2\">\r\n              TEMP C\r\n            </Typography>\r\n            <Typography align=\"right\" variant=\"h3\">\r\n              {getTemp()}\r\n            </Typography> */}\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default TelemetryCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport Pusher from \"pusher-js\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\nimport TelemetryCard from \"./Card\";\r\nimport { RepositoryFactory } from \"../../../api/repositories/RepositoryFactory\";\r\n\r\nconst MonitorRepository = RepositoryFactory.get(\"monitor\");\r\nconst PatientRepository = RepositoryFactory.get(\"patient\");\r\nconst RXBOX_INTERVAL = 5000;\r\n\r\nconst DOMAIN =\r\n  process.env.REACT_APP_ENV === \"LOCAL\"\r\n    ? process.env.REACT_APP_LOCAL.replace(/(^\\w+:|^)\\/\\//, \"\")\r\n    : process.env.REACT_APP_STAGING.replace(/(^\\w+:|^)\\/\\//, \"\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  TelemetryDashboard: {\r\n    backgroundColor: \"#222222\",\r\n    position: \"fixed\",\r\n    padding: 0,\r\n    margin: 0,\r\n    top: 0,\r\n    left: 0,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n}));\r\n\r\nconst TelemetryDashboard = (props) => {\r\n  const { match } = props;\r\n  const classes = useStyles();\r\n  const [rxboxData, setRxboxData] = useState([]);\r\n  const [patients, setPatients] = useState([]);\r\n  const [monitor, setMonitor] = useState({});\r\n  const [refreshInterval] = useState(60);\r\n  const [code] = useState({\r\n    ecg: \"76282-3\",\r\n    spo2: \"59407-7\",\r\n    primary_rr: \"76270-8\",\r\n    secondary_rr: \"76171-8\",\r\n    temp: \"8310-5\",\r\n    hr: \"76282-3\",\r\n    pr: \"8889-8\",\r\n    bp: \"131328\",\r\n    systolic_bp: \"8480-6\",\r\n    diastolic_bp: \"8462-4\",\r\n    mean_arterial_pressure: \"8478-0\",\r\n  });\r\n\r\n  const getMonitorWithPatientId = async () => {\r\n    if (!_.isEmpty(match.params)) {\r\n      const { data } = await MonitorRepository.getMonitorWithPatient(match.params.id);\r\n      const updatedMonitor = data.map((el) => {\r\n        let { patientIds, ...data } = el;\r\n        if (_.isEmpty(patientIds)) {\r\n          patientIds = [];\r\n        } else {\r\n          patientIds = JSON.parse(patientIds);\r\n        }\r\n        return {\r\n          ...data,\r\n          patientIds,\r\n        };\r\n      });\r\n      setMonitor(updatedMonitor[0]);\r\n    }\r\n  };\r\n\r\n  const getPatient = async (id) => {\r\n    const result = {\r\n      success: 0,\r\n      data: \"\",\r\n      error: \"\",\r\n    };\r\n    if (id) {\r\n      /* Query to get patient */\r\n      try {\r\n        const { data } = await PatientRepository.getPatient(id);\r\n        // setPatient(data.PatientData_report[0]);\r\n        return data.PatientData_report[0];\r\n        // result.success = 1;\r\n        // result.data = data;\r\n      } catch (e) {\r\n        // alert(\"no patient with that id\");\r\n        result.error = e;\r\n        // console.log(e);\r\n      }\r\n    } else {\r\n      result.error = \"Missing id argument\";\r\n    }\r\n    // return result;\r\n  };\r\n\r\n  const getPatients = async () => {\r\n    if (!_.isEmpty(monitor)) {\r\n      const { patientIds } = monitor;\r\n      if (patientIds.length) {\r\n        const patientsData = await Promise.all(\r\n          patientIds.map((el) => {\r\n            const patient = getPatient(el);\r\n\r\n            return patient;\r\n          })\r\n        );\r\n        setPatients(patientsData);\r\n      }\r\n    }\r\n  };\r\n  const validateRxboxData = (data) => {\r\n    if (_.isEmpty(data.tpo_value)) {\r\n      return false;\r\n    }\r\n    if (!_.isEmpty(data.tpo_dataerror)) {\r\n      return false;\r\n    }\r\n    const now = moment.utc();\r\n    const effectiveDate = moment.utc(data.tpo_effectivity);\r\n    const diff = now.diff(effectiveDate) / 1000;\r\n    if (\r\n      data.tpo_code === code.systolic_bp ||\r\n      data.tpo_code === code.diastolic_bp ||\r\n      data.tpo_code === code.mean_arterial_pressure\r\n    ) {\r\n      if (diff >= 3600) {\r\n        return false;\r\n      }\r\n    } else if (diff >= 30) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const getPatientRxboxData = (patientId) => {\r\n    const data = [...rxboxData];\r\n    if (data.length) {\r\n      const rxbox = data.filter((el) => {\r\n        if (Array.isArray(patientId)) {\r\n          if (patientId.indexOf(el.tpo_subject) >= 0) {\r\n            if (validateRxboxData(el)) {\r\n              return el;\r\n            }\r\n          }\r\n        } else if (el.tpo_subject === patientId) {\r\n          if (validateRxboxData(el)) {\r\n            return el;\r\n          }\r\n        }\r\n      });\r\n      return rxbox;\r\n    }\r\n  };\r\n\r\n  const parsePatientsOrder = () => {\r\n    const data = [...patients];\r\n    const sortedData = _.sortBy(data, [\"monitorSection\"]);\r\n    setPatients(sortedData);\r\n  };\r\n\r\n  const autoRefresh = () => {\r\n    setTimeout(function () {\r\n      // window.location.reload();\r\n      getMonitorWithPatientId();\r\n    }, refreshInterval * 1000);\r\n  };\r\n\r\n  const getPatientObservation = async () => {\r\n    const { data, status } = await PatientRepository.getLivePatientObservation();\r\n    // console.log(JSON.parse(data))\r\n    if (status === 200) {\r\n      const [obs, notifs] = data;\r\n      const observations = obs.patientBasicObservation;\r\n      const parsedData = observations.map((el) => {\r\n        const {\r\n          tpo_subject,\r\n          tpo_code,\r\n          tpo_value,\r\n          tpo_dataerror,\r\n          tpo_effectivity,\r\n          ...restData\r\n        } = el;\r\n        const parsedSubject = parseInt(tpo_subject.slice(tpo_subject.search(\"/\") + 1), 10);\r\n        return {\r\n          tpo_subject: parsedSubject,\r\n          tpo_code,\r\n          tpo_value,\r\n          tpo_dataerror,\r\n          tpo_effectivity,\r\n        };\r\n      });\r\n      setRxboxData(parsedData);\r\n    }\r\n  };\r\n\r\n  const getPatientObservationTest = async () => {\r\n    const val = moment.utc().format(\"ss\") % 2 === 1 ? \"90\" : \"25\";\r\n    const data = [\r\n      {\r\n        /* spo2 */\r\n        tpo_code: \"59407-7\",\r\n        tpo_dataerror: \"\",\r\n        tpo_effectivity: moment.utc(),\r\n        tpo_obsid: 704894,\r\n        tpo_subject: 63,\r\n        tpo_value: val\r\n      },\r\n      {\r\n        /* pulse rate */\r\n        tpo_code: \"8889-8\",\r\n        tpo_dataerror: \"\",\r\n        tpo_effectivity: moment.utc(),\r\n        tpo_obsid: 704894,\r\n        tpo_subject: 63,\r\n        tpo_value: val\r\n      },\r\n      {\r\n        /* systolic bp */\r\n        tpo_code: \"8480-6\",\r\n        tpo_dataerror: \"\",\r\n        tpo_effectivity: moment.utc(),\r\n        tpo_obsid: 704894,\r\n        tpo_subject: 63,\r\n        tpo_value: val\r\n      },\r\n      {\r\n        /* diastolic bp */\r\n        tpo_code: \"8462-4\",\r\n        tpo_dataerror: \"\",\r\n        tpo_effectivity: moment.utc(),\r\n        tpo_obsid: 704894,\r\n        tpo_subject: 63,\r\n        tpo_value: val\r\n      },\r\n      {\r\n        /* diastolic bp */\r\n        tpo_code: \"8478-0\",\r\n        tpo_dataerror: \"\",\r\n        tpo_effectivity: moment.utc(),\r\n        tpo_obsid: 704894,\r\n        tpo_subject: 63,\r\n        tpo_value: val\r\n      },\r\n      {\r\n        /* primary rr */\r\n        tpo_code: \"76270-8\",\r\n        tpo_dataerror: \"\",\r\n        tpo_effectivity: moment.utc(),\r\n        tpo_obsid: 704894,\r\n        tpo_subject: 63,\r\n        tpo_value: val\r\n      },\r\n      {\r\n        /* temp */\r\n        tpo_code: \"8310-5\",\r\n        tpo_dataerror: \"\",\r\n        tpo_effectivity: moment.utc(),\r\n        tpo_obsid: 704894,\r\n        tpo_subject: 63,\r\n        tpo_value: val\r\n      },\r\n    ];\r\n    setRxboxData(data);\r\n    // return data;\r\n  };\r\n\r\n  const initPusher = () => {\r\n    const pusherOptions = {\r\n      cluster: \"eu\",\r\n      // options below are needed for pusher local dev server\r\n      encrypted: false,\r\n      httpHost: DOMAIN,\r\n      httpPort: process.env.REACT_APP_PUSHER_HTTP_PORT,\r\n      wsHost: DOMAIN,\r\n      wsPort: process.env.REACT_APP_PUSHER_WS_PORT,\r\n    };\r\n    const pusherKey = process.env.REACT_APP_PUSHER_KEY;\r\n\r\n    var channel = process.env.REACT_APP_PUSHER_CHANNEL;\r\n    var event = process.env.REACT_APP_PUSHER_EVENT;\r\n\r\n    var pusher = new Pusher(pusherKey, pusherOptions);\r\n    // start listening for events\r\n    pusher.subscribe(channel).bind(event, function (data) {\r\n      const d = JSON.parse(data);\r\n      const parsedData = d.patientBasicObservation.map((el) => {\r\n        const {\r\n          tpo_subject,\r\n          tpo_code,\r\n          tpo_value,\r\n          tpo_dataerror,\r\n          tpo_effectivity,\r\n          ...restData\r\n        } = el;\r\n        const parsedSubject = parseInt(tpo_subject.slice(tpo_subject.search(\"/\") + 1), 10);\r\n        return {\r\n          tpo_subject: parsedSubject,\r\n          tpo_code,\r\n          tpo_value,\r\n          tpo_dataerror,\r\n          tpo_effectivity,\r\n        };\r\n      });\r\n      setRxboxData(parsedData);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setInterval(getPatientObservation, RXBOX_INTERVAL);\r\n    // setInterval(getPatientObservationTest, RXBOX_INTERVAL);\r\n    // initPusher();\r\n    getMonitorWithPatientId();\r\n    autoRefresh();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getPatients();\r\n  }, [monitor]);\r\n\r\n  useEffect(() => {\r\n    // getPatientRxboxData([8, 9]);\r\n  }, [rxboxData]);\r\n\r\n  const placedMonitors = () => {\r\n    const monitors = [];\r\n    for (let index = 0; index < 6; index++) {\r\n      let paper = \"\";\r\n      const doesMonitorExist = _.findIndex(patients, function (e) {\r\n        return e.monitorSection - 1 === index;\r\n      });\r\n      if (doesMonitorExist >= 0) {\r\n        paper = <TelemetryCard />;\r\n      }\r\n      monitors.push(\r\n        <Grid item xs={6}>\r\n          {paper}\r\n        </Grid>\r\n      );\r\n    }\r\n    return monitors;\r\n  };\r\n\r\n  const renderPatients = () => {\r\n    const patientCards = [];\r\n    if (!_.isEmpty(monitor)) {\r\n      const { patientIds } = monitor;\r\n      if (patientIds.length) {\r\n        for (let index = 0; index < 6; index++) {\r\n          let paper = \"\";\r\n          const patientId = patientIds[index];\r\n          const patientIndex = _.findIndex(patients, function (e) {\r\n            return e.rpi_patientid === patientId;\r\n          });\r\n          const patient = patients[patientIndex];\r\n          // console.log(patient);\r\n          let rxboxData = getPatientRxboxData(patientId);\r\n          if (!_.isEmpty(patient)) {\r\n            paper = <TelemetryCard patient={patient} rxbox={rxboxData} />;\r\n          }\r\n          patientCards.push(\r\n            <Grid key={`card-${index}`} item xs={6}>\r\n              {paper}\r\n            </Grid>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return patientCards;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        className={clsx(classes.root, classes.TelemetryDashboard)}\r\n        spacing={3}\r\n      >\r\n        {renderPatients()}\r\n        {/* {placedMonitors()} */}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TelemetryDashboard;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\"\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  TableHead,\r\n  Table,\r\n  TableBody,\r\n  IconButton,\r\n  Button,\r\n  Menu,\r\n  MenuItem,\r\n  Divider\r\n} from \"@material-ui/core\";\r\nimport { Save as SaveIcon, Add, MoreVert } from \"@material-ui/icons\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport _ from \"lodash\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0),\r\n  createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\r\n  createData(\"Eclair\", 262, 16.0, 24, 6.0),\r\n  createData(\"Cupcake\", 305, 3.7, 67, 4.3),\r\n  createData(\"Gingerbread\", 356, 16.0, 49, 3.9),\r\n];\r\n\r\nconst Create = () => {\r\n  const classes = useStyles();\r\n  const [menuAnchor, setMenuAnchor] = React.useState(null);\r\n\r\n  const toggleMenuAnchor = (event) => {\r\n    setMenuAnchor(event.currentTarget);\r\n  };\r\n\r\n  const closeMenuAnchor = () => {\r\n    setMenuAnchor(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-around\"\r\n        alignItems=\"center\"\r\n        className={classes.root}\r\n        spacing={3}\r\n      >\r\n        <Grid item xs>\r\n          <Typography variant=\"h3\" style={{ float: \"left\" }}>\r\n            Monitor Settings\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Link to=\"/monitor/create\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              style={{ float: \"right\" }}\r\n              startIcon={<Add />}\r\n              >\r\n              Add Monitor\r\n            </Button>\r\n          </Link>\r\n        </Grid>\r\n      </Grid>\r\n      <Divider />\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Monitor ID</TableCell>\r\n              <TableCell align=\"center\">Monitor Name</TableCell>\r\n              <TableCell align=\"center\">Description</TableCell>\r\n              <TableCell align=\"center\">Patient Count</TableCell>\r\n              <TableCell align=\"center\">Status</TableCell>\r\n              <TableCell align=\"center\">Actions</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow key={row.name}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.name}\r\n                </TableCell>\r\n                <TableCell align=\"center\">{row.calories}</TableCell>\r\n                <TableCell align=\"center\">{row.fat}</TableCell>\r\n                <TableCell align=\"center\">{row.carbs}</TableCell>\r\n                <TableCell align=\"center\">\r\n                  <div style={{ backgroundColor: \"#ebebeb\" }}>RX BOX</div>\r\n                </TableCell>\r\n                <TableCell align=\"center\">\r\n                  <IconButton style={{ float: \"right\" }} aria-label=\"options\" onClick={toggleMenuAnchor}>\r\n                    <MoreVert />\r\n                  </IconButton>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <Menu\r\n        id=\"monitor-menu\"\r\n        anchorEl={menuAnchor}\r\n        keepMounted\r\n        open={Boolean(menuAnchor)}\r\n        onClose={closeMenuAnchor}\r\n      >\r\n        <MenuItem onClick={closeMenuAnchor}>Profile</MenuItem>\r\n        <MenuItem onClick={closeMenuAnchor}>My account</MenuItem>\r\n        <MenuItem onClick={closeMenuAnchor}>Logout</MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Create;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  TableHead,\r\n  Table,\r\n  TableBody,\r\n  IconButton,\r\n  Button,\r\n  Menu,\r\n  MenuItem,\r\n  TextField,\r\n  Divider,\r\n  Card,\r\n  Container,\r\n} from \"@material-ui/core\";\r\nimport { Save as SaveIcon, Add, MoreVert } from \"@material-ui/icons\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport _ from \"lodash\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  button: {\r\n    margin: \"25px 0px\",\r\n    float: \"right\",\r\n  },\r\n}));\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0),\r\n  createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\r\n  createData(\"Eclair\", 262, 16.0, 24, 6.0),\r\n  createData(\"Cupcake\", 305, 3.7, 67, 4.3),\r\n  createData(\"Gingerbread\", 356, 16.0, 49, 3.9),\r\n];\r\n\r\nconst Create = () => {\r\n  const classes = useStyles();\r\n  const [menuAnchor, setMenuAnchor] = React.useState(null);\r\n\r\n  const toggleMenuAnchor = (event) => {\r\n    setMenuAnchor(event.currentTarget);\r\n  };\r\n\r\n  const closeMenuAnchor = () => {\r\n    setMenuAnchor(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-around\"\r\n        alignItems=\"center\"\r\n        className={classes.root}\r\n        spacing={3}\r\n      >\r\n        <Grid item xs={10}>\r\n          <Typography variant=\"h4\" style={{ float: \"left\", margin: \"10px 15px\" }}>\r\n            Create Monitor\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={2}></Grid>\r\n      </Grid>\r\n      <Divider st />\r\n      <Container maxWidth=\"md\">\r\n        <Card style={{ margin: \"10px 15px\", padding: \"25px\" }}>\r\n          <Grid\r\n            container\r\n            justify=\"space-around\"\r\n            // alignItems=\"center\"\r\n            // spacing={3}\r\n          >\r\n            <Grid item xs={3}>\r\n              <TextField\r\n                id=\"standard-full-width\"\r\n                label=\"Monitor Name\"\r\n                placeholder=\"Input name for monitor\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <TextField\r\n                id=\"standard-full-width\"\r\n                label=\"Description\"\r\n                placeholder=\"Input description for monitor\"\r\n                margin=\"normal\"\r\n                multiline\r\n                fullWidth\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            startIcon={<SaveIcon />}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Card>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Create;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Typography, Card, CardContent } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DateRange, Alarm, Person } from \"@material-ui/icons\";\r\nimport moment from \"moment\";\r\nimport { RepositoryFactory } from \"../../../../api/repositories/RepositoryFactory\";\r\n\r\nconst PatientRepository = RepositoryFactory.get(\"patient\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  card: {\r\n    maxWidth: 340,\r\n  },\r\n}));\r\n\r\nconst DateTimePatientCards = () => {\r\n  const classes = useStyles();\r\n  const [time, setTime] = useState(\"12:00:00 PM\");\r\n  const [patientCount, setPatientCount] = useState(0);\r\n\r\n\r\n  const getPatients = async () => {\r\n    const { data } = await PatientRepository.getPatients();\r\n    setPatientCount(data.getpatientlist_report.length || 0)\r\n  };\r\n\r\n  const clock = () => {\r\n    setInterval(() => {\r\n      const timeString = new Date().toLocaleTimeString(\"en-US\");\r\n      setTime(timeString);\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    clock();\r\n    getPatients();\r\n  }, []);\r\n  \r\n  return (\r\n    <div>\r\n      <Grid container direction=\"row\" className={classes.root} spacing={1}>\r\n        <Grid item xs={3}>\r\n          <Card className={classes.card} variant=\"outlined\">\r\n            <CardContent>\r\n              <Grid alignItems=\"center\" container>\r\n                <Grid item xs>\r\n                  <Typography align=\"left\" variant=\"h4\">\r\n                    DATE:\r\n                  </Typography>\r\n                  <Typography align=\"left\" variant=\"h5\">\r\n                    {\" \"}\r\n                    {moment().format(\"YYYY-MM-DD\")}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs>\r\n                  <DateRange style={{ fontSize: \"36px\", float: \"right\" }} />\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n            {/* <CardActions>\r\n              <Button size=\"small\">Learn More</Button>\r\n            </CardActions> */}\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Card className={classes.card} variant=\"outlined\">\r\n            <CardContent>\r\n              <Grid alignItems=\"center\" container>\r\n                <Grid item xs>\r\n                  <Typography align=\"left\" variant=\"h4\">\r\n                    TIME:\r\n                  </Typography>\r\n                  <Typography align=\"left\" variant=\"h5\">\r\n                    {\" \"}\r\n                    {time}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs>\r\n                  <Alarm style={{ fontSize: \"36px\", float: \"right\" }} />\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n            {/* <CardActions>\r\n              <Button size=\"small\">Learn More</Button>\r\n            </CardActions> */}\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Card className={classes.card} variant=\"outlined\">\r\n            <CardContent>\r\n              <Grid alignItems=\"center\" container>\r\n                <Grid item xs>\r\n                  <Typography align=\"left\" variant=\"h4\">\r\n                    PATIENTS:\r\n                  </Typography>\r\n                  <Typography align=\"left\" variant=\"h5\">\r\n                    {\" \"}\r\n                    {patientCount}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs>\r\n                  <Person style={{ fontSize: \"36px\", float: \"right\" }} />\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n            {/* <CardActions>\r\n              <Button size=\"small\">Learn More</Button>\r\n            </CardActions> */}\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateTimePatientCards;\r\n","import React, { useState } from \"react\";\r\nimport { CircularProgress, Button, Backdrop } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nconst Progress = (props) => {\r\n  const classes = useStyles();\r\n  const { open } = props;\r\n  return (\r\n    <>\r\n      <Backdrop className={classes.backdrop} open={open}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Progress;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  TableHead,\r\n  Table,\r\n  TableBody,\r\n  IconButton,\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  CardHeader,\r\n  Button,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  FormControl,\r\n  OutlinedInput,\r\n  InputAdornment,\r\n  FormHelperText,\r\n  CircularProgress,\r\n  TablePagination,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Settings,\r\n  MoreVert,\r\n  DateRange,\r\n  Alarm,\r\n  Person,\r\n  LibraryAdd,\r\n  Close,\r\n  Search,\r\n  DragIndicator,\r\n  Edit,\r\n} from \"@material-ui/icons\";\r\nimport moment from \"moment\";\r\nimport _, { isUndefined } from \"lodash\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport DateTimePatientCards from \"../utils/components/toolbar/DateTimePatientCards\";\r\nimport Progress from \"../utils/components/feedback/Progress\";\r\nimport AuthDialog from \"../utils/components/dialog/AuthDialog\";\r\nimport { RepositoryFactory } from \"../../api/repositories/RepositoryFactory\";\r\n\r\nconst MonitorRepository = RepositoryFactory.get(\"monitor\");\r\nconst PatientRepository = RepositoryFactory.get(\"patient\");\r\nconst StatuscodesRepository = RepositoryFactory.get(\"statuscodes\");\r\nconst MySwal = withReactContent(Swal);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  card: {\r\n    maxWidth: 340,\r\n  },\r\n  row: {\r\n    margin: \"15px 0px\",\r\n  },\r\n  invisible: {\r\n    visibility: \"hidden\",\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  empty: {\r\n    border: \"dashed 1px white\",\r\n  },\r\n  occupied: {\r\n    border: \"solid 1px white\",\r\n  },\r\n  cardContent: {\r\n    paddingBottom: \"10px !important\",\r\n    padding: \"0px\",\r\n  },\r\n  whiteText: {\r\n    color: \"#ffffff\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 240,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  textField: {\r\n    width: \"25ch\",\r\n  },\r\n}));\r\n\r\nconst MonitorSetup = () => {\r\n  const classes = useStyles();\r\n  const rowRef = useRef(null);\r\n  const dragRef = useRef(null);\r\n\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [monitorLoader, setMonitorLoader] = useState(true);\r\n  const [filter, setFilter] = useState({\r\n    search: \"\",\r\n    admissionStatus: \"Active\",\r\n    covidStatus: \"\",\r\n    classificationStatus: \"\",\r\n  });\r\n  const [ward, setWard] = useState(\"UP-PGH WARD 1\");\r\n  const [maximumSlots] = useState(6);\r\n  const [monitors, setMonitors] = useState([]);\r\n  const [patients, setPatients] = useState([]);\r\n  const [patientStatus, setPatientStatus] = useState([]);\r\n  const [chosenMonitor, setChosenMonitor] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    getMonitorsWithPatient();\r\n    getPatients();\r\n    getStatuscodes();\r\n  }, []);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const getStatuscodes = async () => {\r\n    const { data: covidStatus } = await StatuscodesRepository.getPatientCovidCase();\r\n    setPatientStatus([\r\n      ...covidStatus.filter_statuscode_report,\r\n    ]);\r\n  };\r\n\r\n  const getMonitorsWithPatient = async () => {\r\n    setMonitorLoader(true);\r\n    const { data } = await MonitorRepository.getMonitorsWithPatient();\r\n    const updatedMonitor = data.map((el) => {\r\n      let { patientIds, ...data } = el;\r\n      if (_.isEmpty(patientIds)) {\r\n        patientIds = [];\r\n      } else {\r\n        patientIds = JSON.parse(patientIds);\r\n      }\r\n      return {\r\n        ...data,\r\n        patientIds,\r\n      };\r\n    });\r\n    setMonitors(updatedMonitor);\r\n    setMonitorLoader(false);\r\n    // console.log(updatedMonitor);\r\n  };\r\n\r\n  const getPatients = async () => {\r\n    const { data } = await PatientRepository.getPatients();\r\n    const parsedData = data.getpatientlist_report.map((el) => {\r\n      const { rpi_patientid: id, ...patient } = el;\r\n      const name = `${patient.rpi_patientfname} ${patient.rpi_patientlname}`;\r\n      return {\r\n        id,\r\n        name,\r\n        ...patient,\r\n      };\r\n    });\r\n    // console.log(parsedData);\r\n    setPatients(parsedData);\r\n  };\r\n\r\n  const addMonitor = async () => {\r\n    // const updateMonitors = [...monitors];\r\n    // const newMonitor = {\r\n    //   id: 0,\r\n    //   patients: [],\r\n    //   patientIds: [],\r\n    //   patientSlot: 0,\r\n    // };\r\n    // const highestId = Math.max.apply(\r\n    //   Math,\r\n    //   updateMonitors.map(function (o) {\r\n    //     return o.id;\r\n    //   })\r\n    // );\r\n    // newMonitor.id = highestId + 1;\r\n    // updateMonitors.push(newMonitor);\r\n    // setMonitors(updateMonitors);\r\n    const res = await MonitorRepository.addMonitor();\r\n    getMonitorsWithPatient();\r\n  };\r\n\r\n  const deleteMonitor = async (monitorId) => {\r\n    MySwal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes\",\r\n    }).then(async (result) => {\r\n      if (result.value) {\r\n        const res = await MonitorRepository.deleteMonitor(monitorId);\r\n        getMonitorsWithPatient();\r\n      }\r\n    });\r\n    // const res = await MonitorRepository.deleteMonitor(monitorId);\r\n    // getMonitorsWithPatient();\r\n  };\r\n\r\n  const addPatientSlot = async (monitorId) => {\r\n    const updateMonitors = _.cloneDeep(monitors);\r\n    const index = _.findIndex(updateMonitors, function (o) {\r\n      return o.id === monitorId;\r\n    });\r\n    const monitor = updateMonitors[index];\r\n    if (monitor.patientSlot < 6) {\r\n      // monitor.patientSlot++;\r\n    } else {\r\n      /* maximum patient slot */\r\n      return;\r\n    }\r\n    // console.log(updateMonitors);\r\n    // setMonitors(updateMonitors);\r\n    const res = await MonitorRepository.incrementPatientSlot(monitor);\r\n    getMonitorsWithPatient();\r\n  };\r\n\r\n  const deletePatientSlot = async (monitorId, patientId) => {\r\n    /*\r\n      if patientId exists, user deleted an occupied slot\r\n      if patientId is null, user deleted an empty patient slot\r\n    */\r\n    const updateMonitors = _.cloneDeep(monitors);\r\n    const index = _.findIndex(updateMonitors, function (o) {\r\n      return o.id === monitorId;\r\n    });\r\n    if (index >= 0) {\r\n      const { patientIds } = updateMonitors[index];\r\n      if (patientId) {\r\n        const patientIndex = patientIds.indexOf(patientId);\r\n        if (patientIndex >= 0) {\r\n          MySwal.fire({\r\n            title: \"Are you sure?\",\r\n            text: \"You won't be able to revert this!\",\r\n            icon: \"warning\",\r\n            showCancelButton: true,\r\n            confirmButtonColor: \"#3085d6\",\r\n            cancelButtonColor: \"#d33\",\r\n            confirmButtonText: \"Yes\",\r\n            // onClose: () => {\r\n            //   getMonitorsWithPatient();\r\n            // },\r\n          }).then(async (result) => {\r\n            if (result.value) {\r\n              await MonitorRepository.removePatientFromMonitor(patientId, monitorId);\r\n              getMonitorsWithPatient();\r\n            }\r\n          });\r\n          // await MonitorRepository.removePatientFromMonitor(patientId, monitorId);\r\n        }\r\n      } else {\r\n        // Deduct patientSlot\r\n        // updateMonitors[index].patientSlot--;\r\n        MySwal.fire({\r\n          title: \"Are you sure?\",\r\n          text: \"You won't be able to revert this!\",\r\n          icon: \"warning\",\r\n          showCancelButton: true,\r\n          confirmButtonColor: \"#3085d6\",\r\n          cancelButtonColor: \"#d33\",\r\n          confirmButtonText: \"Yes\",\r\n          // onClose: () => {\r\n          //   getMonitorsWithPatient();\r\n          // },\r\n        }).then(async (result) => {\r\n          if (result.value) {\r\n            // await MonitorRepository.removePatientFromMonitor(patientId, monitorId);\r\n            await MonitorRepository.decrementPatientSlot(updateMonitors[index]);\r\n            getMonitorsWithPatient();\r\n          }\r\n        });\r\n        // await MonitorRepository.decrementPatientSlot(updateMonitors[index]);\r\n      }\r\n    }\r\n    // getMonitorsWithPatient();\r\n    // setMonitors(updateMonitors);\r\n  };\r\n\r\n  const onDragEnd = async (result) => {\r\n    setMonitorLoader(true);\r\n    const el = rowRef.current;\r\n    if (!el) {\r\n      return;\r\n    }\r\n    console.log(\"on dragend\");\r\n    el.style.width = \"5%\";\r\n    // el.style.border = \"\";\r\n    // console.log(el);\r\n    const response = {\r\n      success: 0,\r\n      errors: [],\r\n    };\r\n    const { source, destination, draggableId } = result;\r\n    let patientId = parseInt(draggableId, 10);\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\r\n      return;\r\n    }\r\n    let { droppableId: sourceMonitorId } = source;\r\n    let { droppableId: destinationMonitorId } = destination;\r\n    if (sourceMonitorId.indexOf(\"-\") >= 0) {\r\n      sourceMonitorId = parseInt(sourceMonitorId.slice(sourceMonitorId.indexOf(\"-\") + 1), 10);\r\n    }\r\n    if (destinationMonitorId.indexOf(\"-\") >= 0) {\r\n      destinationMonitorId = parseInt(\r\n        destinationMonitorId.slice(destinationMonitorId.indexOf(\"-\") + 1),\r\n        10\r\n      );\r\n    }\r\n    if (draggableId.indexOf(\"-\") >= 0) {\r\n      patientId = parseInt(draggableId.slice(draggableId.indexOf(\"-\") + 1), 10);\r\n    }\r\n    // const updateMonitors = _.cloneDeep(monitors);\r\n    const updateMonitors = [...monitors];\r\n    const sourceIndex = _.findIndex(updateMonitors, function (o) {\r\n      return o.id === sourceMonitorId;\r\n    });\r\n    const sourceMonitor = updateMonitors[sourceIndex];\r\n\r\n    const destinationIndex = _.findIndex(updateMonitors, function (o) {\r\n      return o.id === destinationMonitorId;\r\n    });\r\n    const destinationMonitor = updateMonitors[destinationIndex];\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      // Do nothing, no reorder.\r\n      return;\r\n    } else if (destination.droppableId === \"drop-table\") {\r\n      // Move to table, from monitor\r\n      /* remove from monitor */\r\n      const patientIndex = sourceMonitor.patientIds.indexOf(patientId);\r\n      if (patientIndex >= 0) {\r\n        // sourceMonitor.patientIds.splice(patientIndex, 1);\r\n        await MonitorRepository.removePatientFromMonitor(patientId, sourceMonitorId);\r\n      }\r\n    } else if (source.droppableId === \"drop-table\") {\r\n      // Move from table, to monitor\r\n      /* add to monitor */\r\n      // will push patient_id to monitor.patientIds\r\n      // destinationMonitor.patientIds.push(patientId);\r\n      if (destinationMonitor.patientSlot <= destinationMonitor.patientIds.length) {\r\n        response.errors.push(\"Monitor destination has no slot left.\");\r\n        return;\r\n      }\r\n      if (destinationMonitor.patientIds.length > 6) {\r\n        response.errors.push(\"Monitor destination is full.\");\r\n        return;\r\n      }\r\n      await MonitorRepository.addPatientToMonitor(patientId, destinationMonitorId);\r\n    } else {\r\n      if (destinationMonitor.patientSlot <= destinationMonitor.patientIds.length) {\r\n        response.errors.push(\"Monitor destination has no slot left.\");\r\n        return;\r\n      }\r\n      if (destinationMonitor.patientIds.length > 6) {\r\n        response.errors.push(\"Monitor destination is full.\");\r\n        return;\r\n      }\r\n      /* Move patient to other monitors */\r\n      /* add to monitor destination, remove from monitor source */\r\n      await MonitorRepository.addPatientToMonitor(patientId, destinationMonitorId);\r\n      await MonitorRepository.removePatientFromMonitor(patientId, sourceMonitorId);\r\n      // const patientindex = sourceMonitor.patientIds.indexOf(patientId);\r\n      // sourceMonitor.patientIds.splice(patientindex, 1);\r\n      // destinationMonitor.patientIds.push(patientId);\r\n    }\r\n    if (response.errors.length === 0) {\r\n      // await MonitorRepository.addPatientToMonitor(patientId, destinationMonitorId);\r\n      // setMonitors(updateMonitors);\r\n    }\r\n    await getMonitorsWithPatient();\r\n    setMonitorLoader(false);\r\n  };\r\n\r\n  const renderPatients = (monitorIndex) => {\r\n    const { patientSlot, id: monitorId } = monitors[monitorIndex];\r\n    // const patientSlot = monitors[monitorIndex].patientIds.length\r\n    const patientsComponent = [];\r\n    for (let i = 0; i <= patientSlot - 1; i++) {\r\n      // const patient = monitors[monitorIndex][\"patients\"][i];\r\n      // if (_.isEmpty(monitors[monitorIndex].patientIds)) continue;\r\n\r\n      const patientId = monitors[monitorIndex].patientIds[i];\r\n      // if (_.isEmpty(patientId)) {\r\n      //   continue;\r\n      // }\r\n      // console.log(patientId);\r\n      const patientIndex = _.findIndex(patients, function (o) {\r\n        return o.id === patientId;\r\n      });\r\n      const patient = patients[patientIndex];\r\n      if (patient) {\r\n        patientsComponent.push(\r\n          <Draggable key={`key-${patientId}`} draggableId={`${patientId}`} index={patientId}>\r\n            {(provided, snapshot) => (\r\n              <Grid\r\n                item\r\n                xs=\"6\"\r\n                ref={provided.innerRef}\r\n                {...provided.draggableProps}\r\n                {...provided.dragHandleProps}\r\n              >\r\n                <Card\r\n                  variant=\"outlined\"\r\n                  className={patient ? classes.occupied : classes.empty}\r\n                  style={{ backgroundColor: \"#5c5c5c\" }}\r\n                >\r\n                  <Grid alignItems=\"center\" container>\r\n                    <Grid align=\"right\" item xs>\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => deletePatientSlot(monitorId, patientId)}\r\n                      >\r\n                        <Close style={{ fontSize: \"14px\", color: \"#ffffff\" }} />\r\n                      </IconButton>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <CardContent className={classes.cardContent}>\r\n                    <Typography\r\n                      className={classes.whiteText}\r\n                      style={patient ? { fontWeight: \"bold\" } : {}}\r\n                    >\r\n                      {patient?.name || \"ADD PATIENT\"}\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            )}\r\n          </Draggable>\r\n        );\r\n      } else {\r\n        patientsComponent.push(\r\n          <Grid item xs=\"6\">\r\n            <Card\r\n              variant=\"outlined\"\r\n              className={patient ? classes.occupied : classes.empty}\r\n              style={{ backgroundColor: \"#5c5c5c\" }}\r\n            >\r\n              <Grid alignItems=\"center\" container>\r\n                <Grid align=\"right\" item xs>\r\n                  <IconButton size=\"small\" onClick={() => deletePatientSlot(monitorId, null)}>\r\n                    <Close style={{ fontSize: \"14px\", color: \"#ffffff\" }} />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <CardContent className={classes.cardContent}>\r\n                <Typography\r\n                  className={classes.whiteText}\r\n                  style={patient ? { fontWeight: \"bold\" } : {}}\r\n                >\r\n                  {patient?.name || \"ADD PATIENT\"}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        );\r\n      }\r\n    }\r\n    const emptySlots = maximumSlots - patientSlot;\r\n    // console.log(emptySlots);\r\n    for (let i = 0; i <= emptySlots - 1; i++) {\r\n      patientsComponent.push(\r\n        <Grid item xs=\"6\" className={classes.invisible}>\r\n          <Card variant=\"outlined\" className={classes.empty} style={{ backgroundColor: \"#5c5c5c\" }}>\r\n            <Grid alignItems=\"center\" container>\r\n              <Grid align=\"right\" item xs>\r\n                <Close style={{ fontSize: \"14px\", color: \"#ffffff\" }} />\r\n              </Grid>\r\n            </Grid>\r\n            <CardContent className={classes.cardContent}>\r\n              <Typography className={classes.whiteText}>ADD PATIENT--</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    }\r\n    return patientsComponent;\r\n  };\r\n\r\n  const renderMonitors = () => {\r\n    let monitorsData = [...monitors];\r\n    monitorsData = monitorsData.filter((el) => el.patientSlot <= 6);\r\n    return monitorsData.map((el, i) => {\r\n      const { patientSlot } = el;\r\n      return (\r\n        <Grid item xs={4}>\r\n          <Typography align=\"left\" variant=\"h5\">\r\n            {/* Monitor\r\n            {el.id} */}\r\n            {el.name}\r\n            <IconButton aria-label=\"edit-monitor\" onClick={(e) => editMonitorForm(el)}>\r\n              <Edit style={{ marginTop: -5 }} />\r\n            </IconButton>\r\n          </Typography>\r\n          <Droppable droppableId={`monitor-${el.id}`}>\r\n            {(provided, snapshot) => (\r\n              <Card\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n                className={classes.paper}\r\n                style={\r\n                  snapshot.isDraggingOver\r\n                    ? { backgroundColor: \"skyblue\" }\r\n                    : { backgroundColor: \"#5c5c5c\" }\r\n                }\r\n              >\r\n                <Grid alignItems=\"center\" container>\r\n                  <Grid align=\"left\" item xs>\r\n                    <IconButton aria-label=\"options\" onClick={() => addPatientSlot(el.id)}>\r\n                      <LibraryAdd className={classes.whiteText} />\r\n                    </IconButton>\r\n                  </Grid>\r\n                  <Grid align=\"right\" item xs>\r\n                    <IconButton aria-label=\"options\" onClick={() => deleteMonitor(el.id)}>\r\n                      <Close className={classes.whiteText} />\r\n                    </IconButton>\r\n                  </Grid>\r\n                </Grid>\r\n                <CardContent>\r\n                  <Grid spacing={1} alignItems=\"center\" container>\r\n                    {renderPatients(i)}\r\n                    {provided.placeholder}\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            )}\r\n          </Droppable>\r\n        </Grid>\r\n      );\r\n    });\r\n  };\r\n\r\n  const filterPatients = () => {\r\n    const keyword = filter.search;\r\n    let patientIds = monitors.map((el) => {\r\n      return el.patientIds;\r\n    });\r\n    patientIds = patientIds.flat();\r\n    let filteredPatients = patients.filter((el) => {\r\n      if (patientIds.indexOf(el.id) >= 0) {\r\n      } else {\r\n        return el;\r\n      }\r\n    });\r\n    filteredPatients = filteredPatients.filter((el) => {\r\n      if (el.rpi_patientfname.toLowerCase().includes(keyword)) {\r\n        return el;\r\n      }\r\n      if (el.rpi_patientlname.toLowerCase().includes(keyword)) {\r\n        return el;\r\n      }\r\n    });\r\n    if (filter.covidStatus) {\r\n      filteredPatients = filteredPatients.filter((el) => {\r\n        return el[\"Covid Case\"] === filter.covidStatus;\r\n      });\r\n    }\r\n    return filteredPatients;\r\n  };\r\n\r\n  const renderTable = () => {\r\n    let filteredPatients = filterPatients();\r\n    filteredPatients = filteredPatients.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\r\n    console.log(filteredPatients);\r\n    return (\r\n      <TableContainer component={Paper}>\r\n        <Droppable droppableId=\"drop-table\">\r\n          {(provided, snapshot) => (\r\n            <Table\r\n              style={snapshot.isDraggingOver ? { backgroundColor: \"skyblue\" } : {}}\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              className={classes.table}\r\n              aria-label=\"simple table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell></TableCell>\r\n                  <TableCell>Name</TableCell>\r\n                  <TableCell align=\"center\">Date Admitted</TableCell>\r\n                  <TableCell align=\"center\">Time Admitted</TableCell>\r\n                  <TableCell align=\"center\">Bed No.</TableCell>\r\n                  <TableCell align=\"center\">COVID-19 Case</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {filteredPatients.map((row, index) => (\r\n                  /* sol 1 */\r\n                  <TableRow key={row.name}>\r\n                    <Draggable\r\n                      // key={\"draggableKey-\" + index}\r\n                      key={`key-${row.id}`}\r\n                      draggableId={`table-${row.id}`}\r\n                      // draggableId={row.id}\r\n                      // index={`table-${row.id}`}\r\n                      index={row.id}\r\n                    >\r\n                      {(draggableProvided, draggableSnapshot) => (\r\n                        <>\r\n                          <TableCell\r\n                            ref={(node) => {\r\n                              rowRef.current = node;\r\n                              draggableProvided.innerRef(node);\r\n                            }}\r\n                            {...draggableProvided.draggableProps}\r\n                            {...draggableProvided.dragHandleProps}\r\n                            scope=\"row\"\r\n                          >\r\n                            {draggableSnapshot.isDragging ? (\r\n                              <TableCell\r\n                                // ref={rowRef}\r\n                                scope=\"row\"\r\n                                style={{\r\n                                  border: \"1px solid #4ba2e7\",\r\n                                  backgroundColor: \"#4ba2e7\",\r\n                                  width: \"inherit\",\r\n                                }}\r\n                              >\r\n                                <Grid alignItems=\"center\" container style={{ width: \"300px\" }}>\r\n                                  <Grid item xs={3}>\r\n                                    <Person style={{ marginRight: 15, color: \"white\" }} />\r\n                                  </Grid>\r\n                                  <Grid item xs>\r\n                                    <Typography style={{ color: \"white\" }}>{row.name}</Typography>\r\n                                  </Grid>\r\n                                </Grid>\r\n                              </TableCell>\r\n                            ) : (\r\n                              <DragIndicator />\r\n                            )}\r\n                          </TableCell>\r\n                        </>\r\n                      )}\r\n                    </Draggable>\r\n                    <TableCell component=\"th\">{row.name}</TableCell>\r\n\r\n                    <TableCell align=\"center\">{row.rpi_date_admitted.slice(0, 10)}</TableCell>\r\n                    <TableCell align=\"center\">{row.rpi_date_admitted.slice(11)}</TableCell>\r\n                    <TableCell align=\"center\">Bed #{row.rpi_bednumber}</TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <div\r\n                      // style={{ backgroundColor: \"#4ba2e7\", color: \"white\" }}\r\n                      >\r\n                        {row.rpi_covid19 ? (\r\n                          <span style={{ backgroundColor: \"#4ba2e7\", color: \"white\", padding: 8 }}>\r\n                            {row.rpi_covid19}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                  /* end sol 1 */\r\n                ))}\r\n                {provided.placeholder}\r\n              </TableBody>\r\n            </Table>\r\n          )}\r\n        </Droppable>\r\n      </TableContainer>\r\n    );\r\n  };\r\n  const onBeforeCapture = (event) => {\r\n    const el = rowRef.current;\r\n    el.style.border = 0;\r\n    if (!el) {\r\n      return;\r\n    }\r\n    // el.style.width = \"10%\";\r\n    // el.style.width = \"500px\";\r\n  };\r\n\r\n  const editMonitorForm = async (monitor) => {\r\n    const updatedMonitor = { ...monitor };\r\n    const { value } = await MySwal.fire({\r\n      title: \"Monitor Name\",\r\n      input: \"text\",\r\n      inputValue: monitor.name,\r\n      showCancelButton: true,\r\n      inputValidator: (value) => {\r\n        if (!value) {\r\n          return \"The monitor name required\";\r\n        }\r\n        if (value === monitor.name) {\r\n          return \"The monitor name must be different\";\r\n        }\r\n      },\r\n    });\r\n    if (value) {\r\n      updatedMonitor.name = value;\r\n      const data = await MonitorRepository.updateMonitor(updatedMonitor);\r\n      if (data.status === 200) {\r\n        MySwal.fire({\r\n          icon: \"success\",\r\n          title: \"Monitor updated.\",\r\n          showConfirmButton: true,\r\n          onClose: () => getMonitorsWithPatient(),\r\n        });\r\n      } else {\r\n        MySwal.fire({\r\n          icon: \"warning\",\r\n          text: \"Error encountered with the request.\",\r\n          showConfirmButton: true,\r\n          // onClose: () => getMonitorsWithPatient(),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <AuthDialog /> */}\r\n      <DateTimePatientCards className={classes.row} />\r\n      <Typography className={classes.row} align=\"left\" variant=\"h4\">\r\n        {ward}: COVID-19 PATIENT LIST\r\n        <IconButton aria-label=\"options\" onClick={addMonitor}>\r\n          <LibraryAdd />\r\n        </IconButton>\r\n      </Typography>\r\n      <DragDropContext onBeforeCapture={onBeforeCapture} onDragEnd={onDragEnd}>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          className={classes.root}\r\n          spacing={3}\r\n          style={{ display: \"relative\" }}\r\n        >\r\n          {/* <Progress open={true}/> */}\r\n          <CircularProgress\r\n            style={monitorLoader ? { display: \"absolute\", zIndex: \"999\" } : { display: \"none\" }}\r\n          />\r\n          {/* <CircularProgress /> */}\r\n          {/* {!monitorLoader ? renderMonitors() : null} */}\r\n          {renderMonitors()}\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          className={classes.root}\r\n          spacing={3}\r\n          style={{ marginTop: \"20px\" }}\r\n        >\r\n          <Grid item xs={12}>\r\n            {/* TABLE */}\r\n            <Grid container spacing={0}>\r\n              <Grid align=\"left\" xs={2} item>\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <InputLabel id=\"covid-status-label\">COVID-19 Case</InputLabel>\r\n                  <Select\r\n                    labelId=\"covid-status-label\"\r\n                    value={filter.covidStatus}\r\n                    autoWidth\r\n                    name=\"covidStatus\"\r\n                    onChange={(e) => {\r\n                      const data = { ...filter };\r\n                      data[e.target.name] = e.target.value;\r\n                      setFilter(data);\r\n                    }}\r\n                    label=\"COVID-19 Case\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {patientStatus.map((el) => {\r\n                      if (el.rps_category === \"Covid Case\") {\r\n                        return <MenuItem value={el.rps_name}>{el.rps_name}</MenuItem>;\r\n                      }\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={7} item />\r\n              <Grid align=\"right\" xs={3} item>\r\n                <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\">\r\n                  <OutlinedInput\r\n                    id=\"search-table\"\r\n                    value={filter.search}\r\n                    onChange={(e) => {\r\n                      const data = { ...filter };\r\n                      data[e.target.name] = e.target.value;\r\n                      setFilter(data);\r\n                    }}\r\n                    name=\"search\"\r\n                    endAdornment={\r\n                      <InputAdornment position=\"end\">\r\n                        <Search />\r\n                      </InputAdornment>\r\n                    }\r\n                    aria-describedby=\"search-table\"\r\n                    inputProps={{\r\n                      \"aria-label\": \"search\",\r\n                    }}\r\n                    labelWidth={0}\r\n                    fullWidth\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n            {renderTable()}\r\n          </Grid>\r\n        </Grid>\r\n      </DragDropContext>\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n        component=\"div\"\r\n        count={filterPatients().length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonitorSetup;\r\n","import React, { forwardRef } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\nconst CustomMaterialTable = (props) => {\r\n  return (\r\n    <>\r\n      <MaterialTable icons={tableIcons} {...props} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomMaterialTable;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  TableContainer,\r\n  TableCell,\r\n  TableRow,\r\n  TableHead,\r\n  Table,\r\n  TableBody,\r\n  IconButton,\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  CardHeader,\r\n  Button,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  FormControl,\r\n  OutlinedInput,\r\n  InputAdornment,\r\n  FormHelperText,\r\n  Menu,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Settings,\r\n  MoreVert,\r\n  DateRange,\r\n  Alarm,\r\n  Person,\r\n  LibraryAdd,\r\n  Close,\r\n  Search,\r\n} from \"@material-ui/icons\";\r\nimport moment from \"moment\";\r\n// import MaterialTable from \"material-table\";\r\nimport _ from \"lodash\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport DateTimePatientCards from \"../utils/components/toolbar/DateTimePatientCards\";\r\nimport MaterialTable from \"../utils/components/table/MaterialTable\";\r\nimport { MTableToolbar, MTableBodyRow } from \"material-table\";\r\nimport { RepositoryFactory } from \"../../api/repositories/RepositoryFactory\";\r\n\r\nconst PatientRepository = RepositoryFactory.get(\"patient\");\r\nconst StatuscodesRepository = RepositoryFactory.get(\"statuscodes\");\r\nconst MySwal = withReactContent(Swal);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  card: {\r\n    maxWidth: 340,\r\n  },\r\n  row: {\r\n    margin: \"15px 0px\",\r\n  },\r\n  invisible: {\r\n    visibility: \"hidden\",\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  empty: {\r\n    border: \"dashed 1px white\",\r\n  },\r\n  occupied: {\r\n    border: \"solid 1px white\",\r\n  },\r\n  cardContent: {\r\n    paddingBottom: \"10px !important\",\r\n    padding: \"0px\",\r\n  },\r\n  whiteText: {\r\n    color: \"#ffffff\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 240,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  textField: {\r\n    width: \"25ch\",\r\n  },\r\n}));\r\n\r\nconst PatientList = (props) => {\r\n  const { history } = props;\r\n  const classes = useStyles();\r\n  const [filter, setFilter] = useState({\r\n    search: \"\",\r\n    admissionStatus: \"Active\",\r\n    covidStatus: \"\",\r\n    classificationStatus: \"\"\r\n  });\r\n  const [ward, setWard] = useState(\"UP-PGH WARD 1\");\r\n  const [patients, setPatients] = useState([]);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [chosenPatient, setChosenPatient] = useState({});\r\n  const [patientStatus, setPatientStatus] = useState([]);\r\n\r\n  const toggleOptions = (event, patient) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setChosenPatient(patient);\r\n    // console.log(patient);\r\n  };\r\n\r\n  const closeOptions = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const getStatuscodes = async () => {\r\n    const { data: covidStatus } = await StatuscodesRepository.getPatientCovidCase();\r\n    const { data: classificationStatus } = await StatuscodesRepository.getPatientClassification();\r\n    const { data: admission } = await StatuscodesRepository.getPatientAdmissionStatus();\r\n    setPatientStatus([\r\n      ...covidStatus.filter_statuscode_report,\r\n      ...classificationStatus.filter_statuscode_report,\r\n      ...admission.filter_statuscode_report,\r\n    ]);\r\n  };\r\n\r\n  const getPatients = async () => {\r\n    const result = await PatientRepository.getPatients();\r\n    setPatients(result.data.getpatientlist_report);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPatients();\r\n    getStatuscodes();\r\n  }, []);\r\n\r\n  const filteredPatients = () => {\r\n    let data = [...patients];\r\n\r\n    if (filter.admissionStatus) {\r\n      data = data.filter((el) => {\r\n        return el[\"Admission Status\"] === filter.admissionStatus;\r\n      });\r\n    }\r\n    if (filter.covidStatus) {\r\n      data = data.filter((el) => {\r\n        return el[\"Covid Case\"] === filter.covidStatus;\r\n      });\r\n    }\r\n    if (filter.classificationStatus) {\r\n      data = data.filter((el) => {\r\n        return el.classification === filter.classificationStatus;\r\n      });\r\n    }\r\n    return data;\r\n  };\r\n\r\n  const updateHandler = () => {\r\n    const { rpi_patientid: id } = chosenPatient;\r\n    history.push({ pathname: `/patient/update/${id}`, state: \"\" });\r\n  };\r\n\r\n  const deleteHandler = () => {\r\n    closeOptions();\r\n    MySwal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes\",\r\n      onClose: () => {\r\n        setChosenPatient({});\r\n      },\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        // deletePatient()\r\n        const { rpi_patientid: id } = chosenPatient;\r\n        deletePatient(id);\r\n      }\r\n    });\r\n  };\r\n\r\n  const deletePatient = async (id) => {\r\n    const { data } = await PatientRepository.deletePatient(id);\r\n    if (data.deletepatient_report[0].deletepatient_report === \"deleted\") {\r\n      // success\r\n      MySwal.fire({\r\n        icon: \"success\",\r\n        title: \"Patient removed.\",\r\n        showConfirmButton: true,\r\n        onClose: () => getPatients(),\r\n      });\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      field: \"rpi_patientfname\",\r\n      render: (rowData) => `${rowData.rpi_patientfname} ${rowData.rpi_patientlname}`,\r\n      customFilterAndSearch: (value, rowData) => {\r\n        if (\r\n          rowData.rpi_patientfname.toLowerCase().includes(value.toLowerCase()) ||\r\n          rowData.rpi_patientlname.toLowerCase().includes(value.toLowerCase())\r\n        ) {\r\n          return rowData;\r\n        }\r\n      },\r\n    },\r\n    {\r\n      title: \"Date Admitted\",\r\n      field: \"rpi_date_admitted\",\r\n      render: (rowData) => `${rowData.rpi_date_admitted.slice(0, 10)}`,\r\n    },\r\n    {\r\n      title: \"Time Admitted\",\r\n      field: \"rpi_date_admitted\",\r\n      render: (rowData) => `${rowData.rpi_date_admitted.slice(11)}`,\r\n    },\r\n    {\r\n      title: \"Bed No.\",\r\n      field: \"rpi_bednumber\",\r\n      render: (rowData) => `${rowData.rpi_bednumber}`,\r\n    },\r\n    {\r\n      title: \"Admission Status\",\r\n      field: \"rpi_covid19\",\r\n      render: (rowData) => `${rowData[\"Admission Status\"] || \"\"}`,\r\n    },\r\n    {\r\n      title: \"COVID-19 Case\",\r\n      field: \"rpi_covid19\",\r\n      render: (rowData) => `${rowData[\"Covid Case\"] || \"\"}`,\r\n    },\r\n    {\r\n      title: \"COVID-19 Diagnosis\",\r\n      field: \"rpi_covid19\",\r\n      render: (rowData) => `${rowData.classification || \"\"}`,\r\n    },\r\n    {\r\n      title: \"Actions\",\r\n      field: \"tabledata.id\",\r\n      sorting: false,\r\n      render: (rowData) => (\r\n        <IconButton\r\n          style={{ float: \"\" }}\r\n          aria-label=\"options\"\r\n          onClick={(e) => toggleOptions(e, rowData)}\r\n        >\r\n          <MoreVert />\r\n        </IconButton>\r\n      ),\r\n      disableClick: true,\r\n    },\r\n  ];\r\n\r\n  const renderTable = () => {\r\n    return (\r\n      <MaterialTable\r\n        onRowClick={(event, rowData) => {\r\n          history.push({ pathname: `/patient/details/${rowData.rpi_patientid}`, state: \"\" });\r\n        }}\r\n        options={{\r\n          search: true,\r\n        }}\r\n        columns={columns}\r\n        data={filteredPatients(patients)}\r\n        title={\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                <InputLabel id=\"admission-status-label\">Admission Status</InputLabel>\r\n                <Select\r\n                  labelId=\"admission-status-label\"\r\n                  value={filter.admissionStatus}\r\n                  autoWidth\r\n                  name=\"admissionStatus\"\r\n                  onChange={(e) => {\r\n                    const data = { ...filter };\r\n                    data[e.target.name] = e.target.value;\r\n                    setFilter(data);\r\n                  }}\r\n                  label=\"Admission Status\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {patientStatus.map((el) => {\r\n                    if (el.rps_category === \"Admission Status\") {\r\n                      return <MenuItem value={el.rps_name}>{el.rps_name}</MenuItem>;\r\n                    }\r\n                  })}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                <InputLabel id=\"covid-status-label\">COVID-19 Case</InputLabel>\r\n                <Select\r\n                  labelId=\"covid-status-label\"\r\n                  value={filter.covidStatus}\r\n                  autoWidth\r\n                  name=\"covidStatus\"\r\n                  onChange={(e) => {\r\n                    const data = { ...filter };\r\n                    data[e.target.name] = e.target.value;\r\n                    setFilter(data);\r\n                  }}\r\n                  label=\"COVID-19 Case\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {patientStatus.map((el) => {\r\n                    if (el.rps_category === \"Covid Case\") {\r\n                      return <MenuItem value={el.rps_name}>{el.rps_name}</MenuItem>;\r\n                    }\r\n                  })}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                <InputLabel id=\"classification-status-label\">COVID-19 Diagnosis</InputLabel>\r\n                <Select\r\n                  labelId=\"classification-status-label\"\r\n                  value={filter.classificationStatus}\r\n                  autoWidth\r\n                  name=\"classificationStatus\"\r\n                  onChange={(e) => {\r\n                    const data = { ...filter };\r\n                    data[e.target.name] = e.target.value;\r\n                    setFilter(data);\r\n                  }}\r\n                  label=\"COVID-19 Diagnosis\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {patientStatus.map((el) => {\r\n                    if (el.rps_category === \"Classification\") {\r\n                      return <MenuItem value={el.rps_name}>{el.rps_name}</MenuItem>;\r\n                    }\r\n                  })}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        }\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DateTimePatientCards className={classes.row} />\r\n      <Typography className={classes.row} align=\"left\" variant=\"h4\">\r\n        {ward}: COVID-19 PATIENT LIST\r\n        {/* <IconButton aria-label=\"options\" onClick={addMonitor}>\r\n          <LibraryAdd />\r\n        </IconButton> */}\r\n      </Typography>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        className={classes.root}\r\n        spacing={3}\r\n      >\r\n        {/* {renderMonitors()} */}\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        className={classes.root}\r\n        spacing={3}\r\n        style={{ marginTop: \"20px\" }}\r\n      >\r\n        <Grid item xs={12}>\r\n          {/* TABLE */}\r\n          <Grid container>\r\n            <Grid align=\"left\" xs={2} item></Grid>\r\n            <Grid xs={7} item />\r\n            <Grid align=\"right\" xs={3} item></Grid>\r\n          </Grid>\r\n          {renderTable()}\r\n        </Grid>\r\n      </Grid>\r\n      <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={closeOptions}\r\n      >\r\n        <MenuItem onClick={updateHandler}>Edit</MenuItem>\r\n        <MenuItem onClick={deleteHandler}>Delete</MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PatientList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  TextField,\r\n  Divider,\r\n  FormControl,\r\n  MenuItem,\r\n  Select,\r\n  ListSubheader,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// import { Close } from \"@material-ui/icons\";\r\nimport { MuiPickersUtilsProvider, DatePicker, KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport _ from \"lodash\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport { Route, Switch, withRouter, Redirect } from \"react-router-dom\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport DateTimePatientCards from \"../utils/components/toolbar/DateTimePatientCards\";\r\nimport { RepositoryFactory } from \"../../api/repositories/RepositoryFactory\";\r\n\r\nconst PatientRepository = RepositoryFactory.get(\"patient\");\r\nconst StatuscodesRepository = RepositoryFactory.get(\"statuscodes\");\r\n\r\nconst MySwal = withReactContent(Swal);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  card: {\r\n    maxWidth: 340,\r\n  },\r\n  row: {\r\n    margin: \"15px 0px\",\r\n  },\r\n  invisible: {\r\n    visibility: \"hidden\",\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  empty: {\r\n    border: \"dashed 1px white\",\r\n  },\r\n  occupied: {\r\n    border: \"solid 1px white\",\r\n  },\r\n  cardContent: {\r\n    paddingBottom: \"10px !important\",\r\n    padding: \"0px\",\r\n  },\r\n  whiteText: {\r\n    color: \"#ffffff\",\r\n  },\r\n  gridInputMargin: {\r\n    marginLeft: \"15px\",\r\n  },\r\n  formControl: {\r\n    width: 200,\r\n  },\r\n  smallFormControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n}));\r\n\r\nconst PatientRegister = (props) => {\r\n  const classes = useStyles();\r\n  const { match, history } = props;\r\n  const { register, handleSubmit, watch, errors, control, setValue, getValues } = useForm();\r\n  const [patient, setPatient] = useState({\r\n    date_admitted: \"\",\r\n    lastname: \"\",\r\n    firstname: \"\",\r\n    birthdate: null,\r\n    age: \"\",\r\n    gender: \"\",\r\n    covid19_case: \"\",\r\n    admission: \"\",\r\n    remarks: \"\",\r\n    address: \"\",\r\n    city: \"\",\r\n    country: \"\",\r\n    contact_number: \"\",\r\n    email_address: \"\",\r\n    sss_gsis_number: \"\",\r\n    philhealth_number: \"\",\r\n    hmo: \"\",\r\n    emergency_name: \"\",\r\n    emergency_relationship: \"\",\r\n    emergency_contact_number: \"\",\r\n  });\r\n  const [patientStatus, setPatientStatus] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getPatient();\r\n    getStatuscodes();\r\n  }, []);\r\n\r\n  const getStatuscodes = async () => {\r\n    const { data: covidStatus } = await StatuscodesRepository.getPatientClassification();\r\n    const { data: classificationStatus } = await StatuscodesRepository.getPatientCovidCase();\r\n    const { data: admission } = await StatuscodesRepository.getPatientAdmissionStatus();\r\n    setPatientStatus([\r\n      ...covidStatus.filter_statuscode_report,\r\n      ...classificationStatus.filter_statuscode_report,\r\n      ...admission.filter_statuscode_report,\r\n    ]);\r\n  };\r\n\r\n  const patientHandler = (e, modifiedVal = null) => {\r\n    const data = { ...patient };\r\n    if (e) {\r\n      data[e.target.name] = e.target.value;\r\n      setValue(e.target.name, e.target.value);\r\n    } else {\r\n      const { key, value } = modifiedVal;\r\n      switch (key) {\r\n        case \"birthdate\":\r\n          data[key] = value ? moment(value).format(\"YYYY-MM-DD HH:mm:ss\") : null;\r\n          setValue(key, moment(value).format(\"YYYY-MM-DD HH:mm:ss\"));\r\n\r\n          let diffInYears = moment().diff(moment(value), \"years\");\r\n          if (diffInYears === 0) {\r\n            diffInYears = moment().diff(moment(value), \"years\", true).toFixed(3);\r\n          }\r\n          data.age = diffInYears || \"\";\r\n          setValue(\"age\", diffInYears);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    setPatient(data);\r\n  };\r\n\r\n  const getPatient = async () => {\r\n    if (!_.isEmpty(match.params)) {\r\n      const res = await PatientRepository.getPatient(match.params.id);\r\n      if (!_.isEmpty(res.data.PatientData_report)) {\r\n        const patient = res.data.PatientData_report[0];\r\n        await parsePatientData(patient);\r\n        console.log(patient);\r\n      } else {\r\n        alert(\"no patient data\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const parsePatientData = (data) => {\r\n    /* new fields from update\r\n      id\r\n      middlename\r\n      patientstatus\r\n      ward_id\r\n    */\r\n    const updatedData = { ...patient };\r\n    updatedData.address = data.rpi_address;\r\n    updatedData.age = data.rpi_age;\r\n    updatedData.birthdate = data.rpi_birthday;\r\n    updatedData.city = data.rpi_city;\r\n    updatedData.contact_number = data.rpi_contact;\r\n    updatedData.emergency_name = data.rpi_contact_name;\r\n    updatedData.emergency_contact_number = data.rpi_contact_number;\r\n    updatedData.emergency_relationship = data.rpi_contact_relationship;\r\n    updatedData.country = data.rpi_country;\r\n    updatedData.covid19_case = data.rps_case;\r\n    updatedData.date_admitted = data.rpi_date_admitted;\r\n    updatedData.date_admitted = data.rpi_dateregistered;\r\n    updatedData.email = data.rpi_email_add;\r\n    updatedData.gender = data.rpi_gender;\r\n    updatedData.hmo = data.rpi_hmo;\r\n    updatedData.patientid = data.rpi_patientid;\r\n    updatedData.firstname = data.rpi_patientfname;\r\n    updatedData.lastname = data.rpi_patientlname;\r\n    updatedData.middlename = data.rpi_patientmname;\r\n    updatedData.admission = data.rps_admission;\r\n    updatedData.philhealth_number = data.rpi_philhealth_number;\r\n    updatedData.remarks = data.rpi_remarks;\r\n    updatedData.sss_gsis_number = data.rpi_sss_gsis_number;\r\n    updatedData.ward_id = data.rpi_ward_id;\r\n    updatedData.bed_number = data.rpi_bednumber;\r\n    updatedData.civil_status = data.rpi_civilstatus;\r\n    updatedData.patient_classification = data.rps_class;\r\n    setPatient(updatedData);\r\n    console.log(updatedData);\r\n    for (let [key, value] of Object.entries(updatedData)) {\r\n      setValue(key, value);\r\n    }\r\n  };\r\n\r\n  const validateInputs = (data) => {\r\n    console.log('formdata', data);\r\n    const response = {\r\n      patientfname: data.firstname,\r\n      patientlname: data.lastname,\r\n      remarks: data.remarks,\r\n      birthday: data.birthdate,\r\n      gender: data.gender,\r\n      age: data.age,\r\n      covidcase: data.covid19_case,\r\n      admissionstatus: data.admission,\r\n      address: data.address,\r\n      city: data.city,\r\n      country: data.country,\r\n      contact: data.contact_number,\r\n      email: data.email,\r\n      sss_gsis: data.sss_gsis_number,\r\n      philhealth: data.philhealth_number,\r\n      hmo: data.hmo,\r\n      admissiondate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\r\n      emcontactname: data.emergency_name,\r\n      emcontactnumber: data.emergency_contact_number,\r\n      emrelationship: data.emergency_relationship,\r\n      ward: data.ward_id || 0,\r\n      patientid: data.patientid,\r\n      patientmname: data.middlename || \"\",\r\n      patientstatus: data.patientstatus || \"\",\r\n      civil_status: data.civil_status,\r\n      bed_no: data.bed_number,\r\n      classification: data.patient_classification,\r\n    };\r\n    return response;\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    const { patientid } = data;\r\n    console.log(data);\r\n    const payload = validateInputs({ ...data });\r\n    const formData = new FormData();\r\n\r\n    for (let [key, value] of Object.entries(payload)) {\r\n      if (typeof value === \"undefined\") {\r\n        value = \"\";\r\n      }\r\n      if (typeof value === \"string\") {\r\n        value = value.trim();\r\n      }\r\n      formData.append(key, value);\r\n    }\r\n    console.log(data);\r\n    // for (var key in payload) {\r\n    //   formData.append(key, payload[key]);\r\n    // }\r\n    if (patientid) {\r\n      console.log(\"uopdate\");\r\n      await PatientRepository.updatePatient(formData)\r\n        .then((res) => {\r\n          if (res.data.updatepatient_report) {\r\n            Swal.fire({\r\n              icon: \"success\",\r\n              title: \"Patient updated\",\r\n              showConfirmButton: true,\r\n              onClose: () => history.push({ pathname: `/patient/details/${patientid}`, state: \"\" }),\r\n            });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } else {\r\n      await PatientRepository.createPatient(formData)\r\n        .then(async (res) => {\r\n          console.log(res);\r\n          if (res.data.addpatient_report) {\r\n            await PatientRepository.createDefaultPatientConfig(\r\n              res.data.addpatient_report[0].patient_id\r\n            );\r\n            Swal.fire({\r\n              icon: \"success\",\r\n              title: \"Patient added\",\r\n              showConfirmButton: true,\r\n              onClose: () => history.push({ pathname: `/patient/list`, state: \"\" }),\r\n            });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    register({ name: \"covid19_case\" }, { required: true }); // custom register react-select\r\n    register({ name: \"patient_classification\" }, { required: true }); // custom register react-select\r\n    register({ name: \"admission\" }, { required: true }); // custom register react-select\r\n    register({ name: \"civil_status\" }, { required: true }); // custom register react-select\r\n    register({ name: \"gender\" }); // custom register antd input\r\n    register({ name: \"patientid\" }); // custom register antd input\r\n    register({ name: \"middlename\" }); // custom register antd input\r\n    register({ name: \"patientstatus\" }); // custom register antd input\r\n    register({ name: \"ward_id\" }); // custom register antd input\r\n  }, [register]);\r\n\r\n  return (\r\n    <>\r\n      <DateTimePatientCards className={classes.row} />\r\n      <Typography align=\"left\" variant=\"h4\">\r\n        {/* Register Patient */}\r\n        {!_.isEmpty(match.params) ? \"Update \" : \"Register \"}\r\n        Patient\r\n      </Typography>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        {console.log(errors)}\r\n        <Grid container>\r\n          <Grid item xs={2} />\r\n          <Grid item align=\"\" xs={8}>\r\n            <Card variant=\"outlined\">\r\n              <CardContent>\r\n                <Typography variant=\"h5\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                  Personal Information\r\n                </Typography>\r\n                <Divider light style={{ marginBottom: \"15px\" }} />\r\n                <Grid container alignItems=\"center\" className={classes.gridInputMargin}>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Last Name:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <TextField\r\n                      error={errors.lastname}\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      name=\"lastname\"\r\n                      // value={patient.lastname}\r\n                      // onChange={patientHandler}\r\n                      inputRef={register(\r\n                        // { required: true },\r\n                        {\r\n                          validate: {\r\n                            InvalidInput: (value) => {\r\n                              if (!value.replace(/\\s/g, \"\").length) {\r\n                                return \"Input is empty or has only spaces\";\r\n                              }\r\n                            },\r\n                          },\r\n                        }\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Date of Birth:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                      {/* <DatePicker\r\n                        margin=\"dense\"\r\n                        error={errors.birthdate}\r\n                        inputVariant=\"outlined\"\r\n                        format=\"MM/DD/YYYY\"\r\n                        clearable\r\n                        disableFuture\r\n                        name=\"birthdate\"\r\n                        value={patient.birthdate}\r\n                        onChange={(date) => {\r\n                          patientHandler(null, { key: \"birthdate\", value: date });\r\n                          // setBirthdate(date.format(\"YYYY-MM-DD\"));\r\n                        }}\r\n                        inputRef={register({ required: true })}\r\n                      /> */}\r\n                      <KeyboardDatePicker\r\n                        margin=\"dense\"\r\n                        error={errors.birthdate}\r\n                        inputVariant=\"outlined\"\r\n                        disableFuture\r\n                        clearable\r\n                        // value={selectedDate}\r\n                        // placeholder=\"10/10/2018\"\r\n                        name=\"birthdate\"\r\n                        value={patient.birthdate}\r\n                        onChange={(date) => {\r\n                          patientHandler(null, { key: \"birthdate\", value: date });\r\n                          // setBirthdate(date.format(\"YYYY-MM-DD\"));\r\n                        }}\r\n                        inputRef={register({ required: true })}\r\n                        format=\"MM/DD/YYYY\"\r\n                      // minDate={new Date()}\r\n                      // format=\"MM/dd/yyyy\"\r\n                      />\r\n                    </MuiPickersUtilsProvider>\r\n                  </Grid>\r\n                  <Grid item xs={1}>\r\n                    <Typography variant=\"body1\" color=\"textSecondary\" gutterBottom>\r\n                      Age:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={1}>\r\n                    <TextField\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      name=\"age\"\r\n                      value={patient.age}\r\n                      // onChange={patientHandler}\r\n                      disabled\r\n                      inputRef={register({ required: true })}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid container alignItems=\"center\" className={classes.gridInputMargin}>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      First Name:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <TextField\r\n                      error={errors.firstname}\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      name=\"firstname\"\r\n                      // value={patient.firstname}\r\n                      // onChange={patientHandler}\r\n                      inputRef={register(\r\n                        // { required: true },\r\n                        {\r\n                          validate: {\r\n                            InvalidInput: (value) => {\r\n                              if (!value.replace(/\\s/g, \"\").length) {\r\n                                return \"Input is empty or has only spaces\";\r\n                              }\r\n                            },\r\n                          },\r\n                        }\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Civil Status:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <FormControl margin=\"dense\" variant=\"outlined\" className={classes.formControl}>\r\n                      <Select\r\n                        error={errors.civil_status}\r\n                        id=\"civilstatus-select\"\r\n                        labelId=\"civil-status\"\r\n                        value={patient.civil_status || \"\"}\r\n                        onChange={patientHandler}\r\n                        name=\"civil_status\"\r\n                      // inputRef={register({ required: true })}\r\n                      >\r\n                        <MenuItem value={\"Single\"}>Single</MenuItem>\r\n                        <MenuItem value={\"Married\"}>Married</MenuItem>\r\n                        <MenuItem value={\"Widowed\"}>Widowed</MenuItem>\r\n                        <MenuItem value={\"Others\"}>Others</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={1}>\r\n                    <Typography variant=\"body1\" color=\"textSecondary\" gutterBottom>\r\n                      Gender:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={1}>\r\n                    <FormControl\r\n                      margin=\"dense\"\r\n                      className={classes.smallFormControl}\r\n                      variant=\"outlined\"\r\n                    >\r\n                      <Select\r\n                        id=\"grouped-select\"\r\n                        labelId=\"gender\"\r\n                        onChange={patientHandler}\r\n                        value={patient.gender || \"\"}\r\n                        name=\"gender\"\r\n                        // inputRef={register({ required: true })}\r\n                        autoWidth\r\n                      >\r\n                        <MenuItem value={\"Male\"}>Male</MenuItem>\r\n                        <MenuItem value={\"Female\"}>Female</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                    {/* <FormControl className={classes.smallFormControl} variant=\"outlined\">\r\n                      <Select\r\n                        labelId=\"demo-simple-select-autowidth-label\"\r\n                        id=\"demo-simple-select-autowidth\"\r\n                        value={patient.civil_status || \"\"}\r\n                        onChange={patientHandler}\r\n                        autoWidth\r\n                      >\r\n                        <MenuItem value=\"\">\r\n                          <em>None</em>\r\n                        </MenuItem>\r\n                        <MenuItem value={10}>Ten</MenuItem>\r\n                        <MenuItem value={20}>Twenty</MenuItem>\r\n                        <MenuItem value={30}>Thirtyyyyyy</MenuItem>\r\n                      </Select>\r\n                    </FormControl> */}\r\n                  </Grid>\r\n                  {/* <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Civil Status:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={1} align=\"left\">\r\n                    <FormControl margin=\"dense\" variant=\"outlined\" className={classes.formControl}>\r\n\r\n                      <Select\r\n                        id=\"grouped-select\"\r\n                        labelId=\"gender\"\r\n                        onChange={patientHandler}\r\n                        value={patient.gender || \"\"}\r\n                        name=\"gender\"\r\n                        // inputRef={register({ required: true })}\r\n                      >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid> */}\r\n                  {/* <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Gender:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={1} align=\"left\">\r\n                    <FormControl margin=\"dense\" variant=\"outlined\" className={classes.formControl}>\r\n\r\n                      <Select\r\n                        id=\"grouped-select\"\r\n                        labelId=\"gender\"\r\n                        onChange={patientHandler}\r\n                        value={patient.gender || \"\"}\r\n                        name=\"gender\"\r\n                        // inputRef={register({ required: true })}\r\n                      >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid> */}\r\n                </Grid>\r\n                <Grid container alignItems=\"center\" className={classes.gridInputMargin}>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      COVID-19 Diagnosis:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <FormControl margin=\"dense\" variant=\"outlined\" className={classes.formControl}>\r\n                      <Select\r\n                        error={errors.patient_classification}\r\n                        id=\"case-select\"\r\n                        labelId=\"patient-classification\"\r\n                        value={patient.patient_classification || \"\"}\r\n                        onChange={patientHandler}\r\n                        name=\"patient_classification\"\r\n                      // inputRef={register({ required: true })}\r\n                      >\r\n                        {/* <ListSubheader>Classification</ListSubheader> */}\r\n                        {patientStatus.map((el) => {\r\n                          if (el.rps_category === \"Classification\") {\r\n                            return <MenuItem value={el.rps_id}>{el.rps_name}</MenuItem>;\r\n                          }\r\n                        })}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Note/s:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <TextField\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      rows={3}\r\n                      multiline\r\n                      name=\"remarks\"\r\n                      // value={patient.remarks}\r\n                      // onChange={patientHandler}\r\n                      inputRef={register}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container alignItems=\"center\" className={classes.gridInputMargin}>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      COVID-19 Case:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <FormControl margin=\"dense\" variant=\"outlined\" className={classes.formControl}>\r\n                      <Select\r\n                        error={errors.covid19_case}\r\n                        id=\"case-select\"\r\n                        labelId=\"covid-case\"\r\n                        value={patient.covid19_case || \"\"}\r\n                        onChange={patientHandler}\r\n                        name=\"covid19_case\"\r\n                      // inputRef={register({ required: true })}\r\n                      >\r\n                        {/* <ListSubheader>Confirmed Covid-19 Case</ListSubheader> */}\r\n                        {patientStatus.map((el) => {\r\n                          if (el.rps_category === \"Covid Case\") {\r\n                            return <MenuItem value={el.rps_id}>{el.rps_name}</MenuItem>;\r\n                          }\r\n                        })}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Admission Status:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <FormControl margin=\"dense\" variant=\"outlined\" className={classes.formControl}>\r\n                      <Select\r\n                        error={errors.admission}\r\n                        id=\"admission-select\"\r\n                        labelId=\"admission\"\r\n                        value={patient.admission || \"\"}\r\n                        onChange={patientHandler}\r\n                        name=\"admission\"\r\n                      // inputRef={register({ required: true })}\r\n                      >\r\n                        {/* <ListSubheader>Confirmed Covid-19 Case</ListSubheader> */}\r\n                        {patientStatus.map((el) => {\r\n                          if (el.rps_category === \"Admission Status\") {\r\n                            return <MenuItem value={el.rps_id}>{el.rps_name}</MenuItem>;\r\n                          }\r\n                        })}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={1}>\r\n                    <Typography variant=\"body1\" color=\"textSecondary\" gutterBottom>\r\n                      Bed No.:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={1} align=\"left\">\r\n                    <TextField\r\n                      error={errors.bed_number}\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      name=\"bed_number\"\r\n                      // value={patient.remarks}\r\n                      // onChange={patientHandler}\r\n                      inputRef={register({\r\n                        validate: {\r\n                          positive: (value) => parseInt(value, 10) > 0,\r\n                          InvalidInput: (value) => {\r\n                            if (!value.replace(/\\s/g, \"\").length) {\r\n                              return \"Input is empty or has only spaces\";\r\n                            }\r\n                          },\r\n                        },\r\n                      })}\r\n\r\n                    // inputRef={register({ min: 1 })}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  align=\"left\"\r\n                  color=\"textSecondary\"\r\n                  gutterBottom\r\n                  className={classes.row}\r\n                >\r\n                  Contact Information\r\n                </Typography>\r\n                <Divider light style={{ marginBottom: \"15px\" }} />\r\n                <Grid container alignItems=\"center\" className={classes.gridInputMargin}>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Address:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={9}>\r\n                    <TextField\r\n                      fullWidth\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      multiline\r\n                      name=\"address\"\r\n                      // value={patient.address}\r\n                      // onChange={patientHandler}\r\n                      inputRef={register}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      City:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={9}>\r\n                    <TextField\r\n                      fullWidth\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      multiline\r\n                      name=\"city\"\r\n                      // value={patient.city}\r\n                      // onChange={patientHandler}\r\n                      inputRef={register}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Country/State:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={9}>\r\n                    <TextField\r\n                      fullWidth\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      multiline\r\n                      name=\"country\"\r\n                      // value={patient.country}\r\n                      // onChange={patientHandler}\r\n                      inputRef={register}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Contact No.:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <TextField\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      name=\"contact_number\"\r\n                      // value={patient.contact_number}\r\n                      // onChange={patientHandler}\r\n                      inputRef={register}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Email Address:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <TextField\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      name=\"email\"\r\n                      // value={patient.email_address}\r\n                      // onChange={patientHandler}\r\n                      inputRef={register}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container alignItems=\"center\" style={{ margin: \"15px\" }}>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"h6\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Person to contact in case of Emergency\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container alignItems=\"center\" className={classes.gridInputMargin}>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Name:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <TextField\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      name=\"emergency_name\"\r\n                      // value={emergencyContact.emergency_name}\r\n                      // onChange={emergencyContactHandler}\r\n                      inputRef={register}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Contact No.:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <TextField\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      name=\"emergency_contact_number\"\r\n                      // value={emergencyContact.emergency_contact_number}\r\n                      // onChange={emergencyContactHandler}\r\n                      inputRef={register}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2} />\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Relationship:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <TextField\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      name=\"emergency_relationship\"\r\n                      // value={emergencyContact.emergency_relationship}\r\n                      // onChange={emergencyContactHandler}\r\n                      inputRef={register}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container alignItems=\"center\" style={{ margin: \"15px\" }}>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"h6\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Other Information\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container alignItems=\"center\" className={classes.gridInputMargin}>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      SSS/GSIS no.:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <TextField\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      name=\"sss_gsis_number\"\r\n                      // value={patient.sss_gsis_number}\r\n                      // onChange={patientHandler}\r\n                      inputRef={register}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      Philhealth no.:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <TextField\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      name=\"philhealth_number\"\r\n                      // value={patient.philhealth_number}\r\n                      // onChange={patientHandler}\r\n                      inputRef={register}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2} />\r\n                  <Grid item xs={5} />\r\n                  <Grid item xs={2} align=\"left\">\r\n                    <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                      HMO:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <TextField\r\n                      margin=\"dense\"\r\n                      variant=\"outlined\"\r\n                      name=\"hmo\"\r\n                      // value={patient.hmo}\r\n                      // onChange={patientHandler}\r\n                      inputRef={register}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  justify=\"flex-end\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  spacing={2}\r\n                >\r\n                  <Grid item xs={1} style={{ marginRight: \"15px\" }}>\r\n                    <Button color=\"secondary\" onClick={() => history.push(\"/patient/list\")}>\r\n                      Cancel\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item xs={1} style={{ marginRight: \"15px\" }}>\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                      Register\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PatientRegister;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  TextField,\r\n  Divider,\r\n  Paper,\r\n  InputAdornment,\r\n  IconButton,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport _ from \"lodash\";\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from \"moment\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { RepositoryFactory } from \"../../api/repositories/RepositoryFactory\";\r\n\r\nconst PatientRepository = RepositoryFactory.get(\"patient\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(4),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  card: {\r\n    maxWidth: 340,\r\n  },\r\n  row: {\r\n    margin: \"15px 0px\",\r\n  },\r\n  invisible: {\r\n    visibility: \"hidden\",\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  empty: {\r\n    border: \"dashed 1px white\",\r\n  },\r\n  occupied: {\r\n    border: \"solid 1px white\",\r\n  },\r\n  cardContent: {\r\n    paddingBottom: \"10px !important\",\r\n    padding: \"0px\",\r\n  },\r\n  whiteText: {\r\n    color: \"#ffffff\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 240,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  textField: {\r\n    width: \"80%\",\r\n  },\r\n  detailsKey: {\r\n    marginRight: 20,\r\n  },\r\n}));\r\n\r\nconst PatientChart = (props) => {\r\n  const classes = useStyles();\r\n  const { observation, patientId, style } = props;\r\n  const [observationType] = useState(observation.name);\r\n  const [observationData, setObservationData] = useState([]);\r\n  const [dateFilter, setDateFilter] = useState(moment().format(\"YYYY-MM-DD\"));\r\n  const [timeCoverage] = useState(24);\r\n  const [chartProps, setChartProps] = useState({});\r\n\r\n  \r\n\r\n  const getPatientObservation = async (data) => {\r\n    let { obscode, spec_date, patientid } = data;\r\n    if (_.isEmpty(spec_date)) {\r\n      spec_date = moment().format(\"YYYY-MM-DD\");\r\n    }\r\n    // console.log(_.isEmpty(patientid));\r\n    if (!patientid) {\r\n      return;\r\n    }\r\n\r\n    if (!_.isEmpty(obscode.code)) {\r\n      try {\r\n        const params = { obscode: obscode.code, spec_date, patientid };\r\n        const { data: result } = await PatientRepository.getPatientObservation(params);\r\n        const response = result.PatientRangedObservation;\r\n        const len = [...Array(timeCoverage + 1).keys()].slice(1, timeCoverage + 1);\r\n        const obs = len.map((el) => {\r\n          const index = _.findIndex(response, function (o) {\r\n            return parseInt(o.hour_clustered, 10) === el;\r\n          });\r\n          let val = 0;\r\n          if (index >= 0) {\r\n            val = response[index].avg_value.toFixed(3);\r\n          }\r\n          return {\r\n            x: `${el}:00`,\r\n            y: val,\r\n          };\r\n        });\r\n        setObservationData([\r\n          {\r\n            id: obscode.legend,\r\n            color: \"hsl(110, 70%, 50%)\",\r\n            data: obs,\r\n          },\r\n        ]);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    } else {\r\n      // Blood Pressure\r\n      const obsBP = obscode.data;\r\n      const responseBP = await Promise.all(\r\n        obsBP.map(async (el) => {\r\n          const params = {\r\n            obscode: el.code,\r\n            spec_date,\r\n            patientid,\r\n          };\r\n          const { data: result } = await PatientRepository.getPatientObservation(params);\r\n          const response = result.PatientRangedObservation;\r\n\r\n          const len = [...Array(timeCoverage + 1).keys()].slice(1, timeCoverage + 1);\r\n          const obs = len.map((el) => {\r\n            const index = _.findIndex(response, function (o) {\r\n              return parseInt(o.hour_clustered, 10) === el;\r\n            });\r\n            let val = 0;\r\n            if (index >= 0) {\r\n              val = response[index].avg_value.toFixed(3);\r\n            }\r\n            return {\r\n              x: `${el}:00`,\r\n              y: val,\r\n            };\r\n          });\r\n          return {\r\n            id: el.legend,\r\n            color: \"hsl(110, 70%, 50%)\",\r\n            data: obs,\r\n          };\r\n        })\r\n      );\r\n      const newProps = {\r\n        areaOpacity: 0.75,\r\n      };\r\n      setChartProps(newProps);\r\n      setObservationData(responseBP);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPatientObservation({\r\n      obscode: observation,\r\n      spec_date: dateFilter,\r\n      patientid: patientId,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getPatientObservation({\r\n      obscode: observation,\r\n      spec_date: dateFilter,\r\n      patientid: patientId,\r\n    });\r\n  }, [dateFilter, patientId]);\r\n\r\n  return (\r\n    <Paper elevation={3} className={classes.paper} style={{ ...style }}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={4} align=\"left\">\r\n          <Typography variant=\"h4\">{observationType}</Typography>\r\n        </Grid>\r\n        <Grid item xs={6} />\r\n        <Grid item xs={2}>\r\n          <MuiPickersUtilsProvider utils={MomentUtils}>\r\n            <KeyboardDatePicker\r\n              margin=\"dense\"\r\n              // error={errors.birthdate}\r\n              inputVariant=\"outlined\"\r\n              disableFuture\r\n              clearable\r\n              // value={selectedDate}\r\n              // placeholder=\"10/10/2018\"\r\n              name=\"birthdate\"\r\n              value={dateFilter}\r\n              // onChange={(date) => {\r\n              //   patientHandler(null, { key: \"birthdate\", value: date });\r\n              //   // setBirthdate(date.format(\"YYYY-MM-DD\"));\r\n              // }}\r\n              onChange={(date) => {\r\n                setDateFilter(date.format(\"YYYY-MM-DD\"));\r\n              }}\r\n              format=\"MM/DD/YYYY\"\r\n              // minDate={new Date()}\r\n              // format=\"MM/dd/yyyy\"\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <div style={{ width: \"100%\", height: \"600px\" }}>\r\n            <ResponsiveLine\r\n              enableArea\r\n              data={observationData}\r\n              margin={{ top: 100, right: 100, bottom: 75, left: 60 }}\r\n              // margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n              xScale={{ type: \"point\" }}\r\n              {...chartProps}\r\n              yScale={{ type: \"linear\", min: \"auto\", max: \"auto\", stacked: true, reverse: false }}\r\n              axisTop={null}\r\n              axisRight={null}\r\n              axisBottom={{\r\n                orient: \"bottom\",\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: \"Time\",\r\n                legendOffset: 36,\r\n                legendPosition: \"middle\",\r\n              }}\r\n              // axisLeft={{\r\n              //   orient: \"left\",\r\n              //   tickSize: 5,\r\n              //   tickPadding: 5,\r\n              //   tickRotation: 0,\r\n              //   legend: \"count\",\r\n              //   legendOffset: -40,\r\n              //   legendPosition: \"middle\",\r\n              // }}\r\n              colors={{ scheme: \"nivo\" }}\r\n              pointSize={10}\r\n              // pointColor={{ theme: \"background\" }}\r\n              pointColor={{ theme: \"labels.text.fill\" }}\r\n              pointBorderWidth={2}\r\n              // pointBorderColor={{ from: \"serieColor\" }}\r\n              pointBorderColor={{ from: \"serieColor\", modifiers: [] }}\r\n              pointLabel=\"y\"\r\n              pointLabelYOffset={-12}\r\n              useMesh\r\n              // curve=\"natural\"\r\n              enableSlices=\"x\"\r\n              // theme={{\r\n              //   tooltip: {\r\n              //     container: {\r\n              //       background: \"#333\",\r\n              //     },\r\n              //   },\r\n              // }}\r\n              // tooltip={({ id, value, color }) => {\r\n              //   console.log(color);\r\n              //   console.log('test');\r\n              //   return (<strong style={{ color }}>\r\n              //     {id}: {value}\r\n              //   </strong>)\r\n              // }}\r\n              sliceTooltip={({ slice }) => {\r\n                console.log(\"test\", slice);\r\n                return (\r\n                  <div\r\n                    style={{\r\n                      background: \"white\",\r\n                      padding: \"9px 12px\",\r\n                      border: \"1px solid #ccc\",\r\n                    }}\r\n                  >\r\n                    <div style={{ textAlign: \"center\" }}>\r\n                      <strong>{slice.points[0].data.x}</strong>\r\n                    </div>\r\n                    {slice.points.map((point) => (\r\n                      <Grid\r\n                        container\r\n                        key={point.id}\r\n                        style={{\r\n                          // color: point.serieColor,\r\n                          padding: \"3px 0\",\r\n                        }}\r\n                      >\r\n                        <Grid item xs>\r\n                          <span\r\n                            style={{\r\n                              display: \"initial\",\r\n                              color: point.serieColor,\r\n                              paddingRight: \"10px\",\r\n                              float: \"left\",\r\n                            }}\r\n                          >\r\n                            <strong>{point.serieId}</strong>\r\n                            {\":\"}\r\n                          </span>\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                          <span style={{ display: \"initial\", float: \"right\" }}>\r\n                            {point.data.yFormatted}\r\n                          </span>\r\n                        </Grid>\r\n                      </Grid>\r\n                    ))}\r\n                  </div>\r\n                );\r\n              }}\r\n              curve=\"catmullRom\"\r\n              legends={[\r\n                {\r\n                  anchor: \"top\",\r\n                  direction: \"row\",\r\n                  justify: false,\r\n                  translateX: -20,\r\n                  translateY: -30,\r\n                  itemsSpacing: 40,\r\n                  itemDirection: \"left-to-right\",\r\n                  itemWidth: 80,\r\n                  itemHeight: 20,\r\n                  itemOpacity: 0.75,\r\n                  symbolSize: 12,\r\n                  symbolShape: \"circle\",\r\n                  symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n                  effects: [\r\n                    {\r\n                      on: \"hover\",\r\n                      style: {\r\n                        itemBackground: \"rgba(0, 0, 0, .03)\",\r\n                        itemOpacity: 1,\r\n                      },\r\n                    },\r\n                  ],\r\n                },\r\n              ]}\r\n            />\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default PatientChart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  TextField,\r\n  Divider,\r\n  Paper,\r\n  InputAdornment,\r\n  IconButton,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { Create, RedoTwoTone } from \"@material-ui/icons\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport _ from \"lodash\";\r\nimport { RepositoryFactory } from \"../../api/repositories/RepositoryFactory\";\r\n\r\nconst PatientRepository = RepositoryFactory.get(\"patient\");\r\n\r\nconst MySwal = withReactContent(Swal);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(4),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n    marginTop: 50,\r\n  },\r\n}));\r\n\r\nconst PatientNotes = ({data, getPatient}) => {\r\n  const classes = useStyles();\r\n  const parser = {\r\n    email_add: \"email\",\r\n    sss_gsis_number: \"sss_gsis\",\r\n    philhealth_number: \"philhealth\",\r\n    ward_id: \"ward\",\r\n    civilstatus: \"civil_status\",\r\n    contact_name: \"emcontactname\",\r\n    contact_number: \"emcontactnumber\",\r\n    contact_relationship: \"emrelationship\",\r\n    bednumber: \"bed_no\",\r\n    \"Admission Status\": \"admissionstatus\",\r\n    \"Covid Case\": \"covidcase\",\r\n    date_admitted: \"admissiondate\"\r\n  }\r\n  const [mode, setMode] = useState(\"READ\");\r\n  const [note, setNotes] = useState(\"\");\r\n  const [editNote, setEditNote] = useState(\"\");\r\n  const [patient, setPatient] = useState({});\r\n\r\n  const toggleMode = () => setMode(mode === \"READ\" ? \"EDIT\" : \"READ\");\r\n\r\n  useEffect(()=> {\r\n    setNotes(data.rpi_remarks);\r\n    setEditNote(data.rpi_remarks);\r\n    setPatient(data);\r\n  }, [data]);\r\n\r\n  const handleSave = (e) => {\r\n    updatePatient();\r\n  };\r\n\r\n  const updatePatient = async () => {\r\n    const formData = new FormData();\r\n\r\n    for (let [key, value] of Object.entries(patient)) {\r\n      if (typeof value === \"undefined\") {\r\n        value = \"\";\r\n      }\r\n      if (value === null) {\r\n        value = 0;\r\n      }\r\n      if (typeof value === \"string\") {\r\n        value = value.trim();\r\n      }\r\n      if (key === \"rpi_remarks\") {\r\n        value = editNote;\r\n      }\r\n      if (key.search(\"rpi\") >= 0) {\r\n        key = key.slice(4);\r\n      }\r\n      if (parser[key]) {\r\n        key = parser[key];\r\n      }\r\n      formData.append(key, value);\r\n    }\r\n    const data = await PatientRepository.updatePatient(formData);\r\n    if (data) {\r\n      await getPatient(patient.rpi_patientid);\r\n      toggleMode();\r\n    }\r\n  }\r\n\r\n  const confirmCancel = () => {\r\n    if (_.isEqual(note, editNote)) {\r\n      toggleMode();\r\n    } else {\r\n      MySwal.fire({\r\n        title: \"Are you sure?\",\r\n        text: \"You want to discard changes?\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        confirmButtonColor: \"#3085d6\",\r\n        cancelButtonColor: \"#d33\",\r\n        confirmButtonText: \"Yes\",\r\n      }).then(async (result) => {\r\n        if (result.value) {\r\n          toggleMode();\r\n          setEditNote(note);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <Paper elevation={3} className={classes.paper}>\r\n        <Typography variant=\"h5\" align=\"left\">\r\n          PATIENT HISTORY/NOTES{\" \"}\r\n          <IconButton style={{ marginLeft: 10 }} onClick={confirmCancel}>\r\n            <Create />\r\n          </IconButton>\r\n        </Typography>\r\n        <Divider />\r\n          <TextField\r\n            style={{marginTop: 20}}\r\n            fullWidth\r\n            margin=\"dense\"\r\n            variant=\"outlined\"\r\n            rows={15}\r\n            multiline\r\n            name=\"remarks\"\r\n            placeholder={\"Notes about patient...\"}\r\n            value={editNote}\r\n            onChange={(e) => setEditNote(e.target.value)}\r\n            InputProps={{\r\n              readOnly: mode === \"READ\",\r\n            }}\r\n          />\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"flex-end\"\r\n            style={mode === \"READ\" ? { visibility: \"hidden\", marginTop: \"30px\" } : { marginTop: \"30px\" }}\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={1} style={{ marginRight: \"15px\" }}>\r\n              <Button\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={confirmCancel}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1} style={{ marginRight: \"15px\" }}>\r\n              <Button\r\n                fullWidth\r\n                // type=\"submit\"\r\n                disabled={mode === \"READ\"}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleSave}\r\n              >\r\n                SAVE\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PatientNotes;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  TextField,\r\n  Divider,\r\n  Paper,\r\n  InputAdornment,\r\n  IconButton,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Create, RedoTwoTone } from \"@material-ui/icons\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport _ from \"lodash\";\r\nimport Swal from \"sweetalert2\";\r\nimport moment from \"moment\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport { RepositoryFactory } from \"../../api/repositories/RepositoryFactory\";\r\nimport Progress from \"../utils/components/feedback/Progress\";\r\nimport PatientChart from \"./PatientChart\";\r\nimport VitalsTable from \"./VitalsTable\";\r\nimport PatientNotes from \"./Notes\";\r\n\r\nconst MySwal = withReactContent(Swal);\r\nconst PatientRepository = RepositoryFactory.get(\"patient\");\r\nconst MonitorRepository = RepositoryFactory.get(\"monitor\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(4),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  card: {\r\n    maxWidth: 340,\r\n  },\r\n  row: {\r\n    margin: \"15px 0px\",\r\n  },\r\n  invisible: {\r\n    visibility: \"hidden\",\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  empty: {\r\n    border: \"dashed 1px white\",\r\n  },\r\n  occupied: {\r\n    border: \"solid 1px white\",\r\n  },\r\n  cardContent: {\r\n    paddingBottom: \"10px !important\",\r\n    padding: \"0px\",\r\n  },\r\n  whiteText: {\r\n    color: \"#ffffff\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 240,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  textField: {\r\n    width: \"80%\",\r\n  },\r\n  detailsKey: {\r\n    marginRight: 20,\r\n  },\r\n}));\r\n\r\nconst PatientDetails = (props) => {\r\n  const classes = useStyles();\r\n  const { match } = props;\r\n  const [ward] = useState(\"UP-PGH WARD 1\");\r\n  const [tableData, setTableData] = useState([]);\r\n  const { register, handleSubmit, watch, errors, control, setValue, getValues } = useForm();\r\n  const [patient, setPatient] = useState({});\r\n  const [patientConfig, setPatientConfig] = useState({});\r\n  const [loader, setLoader] = useState(true);\r\n  const [mode, setMode] = useState(\"READ\");\r\n  const [code] = useState({\r\n    ecg: \"76282-3\",\r\n    spo2: \"59407-7\",\r\n    primary_rr: \"76270-8\",\r\n    secondary_rr: \"76171-8\",\r\n    temp: \"8310-5\",\r\n    hr: \"76282-3\",\r\n    pr: \"8889-8\",\r\n    bp: \"131328\",\r\n    systolic_bp: \"8480-6\",\r\n    diastolic_bp: \"8462-4\",\r\n    mean_arterial_pressure: \"8478-0\",\r\n  });\r\n  const [observationList] = useState([\r\n    {\r\n      name: \"HEART RATE\",\r\n      legend: \"HR\",\r\n      code: \"76282-3\",\r\n    },\r\n    {\r\n      name: \"PULSE RATE\",\r\n      legend: \"PR\",\r\n      code: \"8889-8\",\r\n    },\r\n    {\r\n      name: \"SPO2\",\r\n      legend: \"%\",\r\n      code: \"59407-7\",\r\n    },\r\n    {\r\n      name: \"RESPIRATORY RATE\",\r\n      legend: \"RR\",\r\n      code: \"76270-8\",\r\n    },\r\n    {\r\n      name: \"BLOOD PRESSURE\",\r\n      data: [\r\n        {\r\n          legend: \"SYSTOLIC\",\r\n          code: \"8480-6\",\r\n        },\r\n        {\r\n          legend: \"DIASTOLIC\",\r\n          code: \"8462-4\",\r\n        },\r\n        {\r\n          legend: \"MAP\",\r\n          code: \"8478-0\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: \"TEMPERATURE\",\r\n      legend: \"CELSIUS\",\r\n      code: \"8310-5\",\r\n    },\r\n  ]);\r\n  console.log(errors);\r\n  const [requestId, setRequestId] = useState(null);\r\n  \r\n\r\n  const getAllObservation = async (data) => {\r\n    let { spec_date, patientid } = data;\r\n\r\n    if (_.isEmpty(spec_date)) {\r\n      spec_date = moment().format(\"YYYY-MM-DD\");\r\n    }\r\n    if (!patientid) {\r\n      return;\r\n    }\r\n    console.log('test');\r\n    const params = { spec_date, patientid };\r\n    const query = await PatientRepository.getAllObservation(params);\r\n    setTableData(query);\r\n  }\r\n\r\n  const getPatient = async (id) => {\r\n    setLoader(true);\r\n    console.log(id)\r\n    if (id) {\r\n      /* Query to get patient */\r\n      try {\r\n        const { data } = await PatientRepository.getPatient(id);\r\n        setPatient(data.PatientData_report[0]);\r\n      } catch (e) {\r\n        alert(\"no patient with that id\");\r\n        console.log(e);\r\n      }\r\n      setLoader(false);\r\n    }\r\n  };\r\n\r\n  const getPatientConfig = async (id) => {\r\n    if (id) {\r\n      /* Query to get patient */\r\n      try {\r\n        const { data } = await PatientRepository.getPatientConfig(id);\r\n        if (data.length > 0) {\r\n          setPatientConfig(data[0]);\r\n          for (let [key, value] of Object.entries(data[0])) {\r\n            key = key.slice(key.search(\"_\") + 1);\r\n            setValue(key, value);\r\n          }\r\n        }\r\n      } catch (e) {\r\n        alert(\"No patient config\");\r\n        console.log(e);\r\n      }\r\n      setLoader(false);\r\n    }\r\n  };\r\n\r\n  const updatePatientConfig = async (formData) => {\r\n    setLoader(true);\r\n    try {\r\n      const patientId = patient.rpi_patientid;\r\n      formData.bp_time_frame = formData.time_frame;\r\n      delete formData.time_frame;\r\n      const response = await PatientRepository.addPatientConfig({\r\n        patientid: patientId,\r\n        ...formData,\r\n      });\r\n      getPatientConfig(patientId);\r\n      if (response) {\r\n        MySwal.fire({\r\n          icon: \"success\",\r\n          title: \"Patient Config updated!\",\r\n        });\r\n      }\r\n    } catch (e) {\r\n      if (e) {\r\n        // alert(\"no patient with that id\");\r\n        console.log(e);\r\n        MySwal.fire({\r\n          icon: \"error\",\r\n          title: \"Update failed.\",\r\n        });\r\n      }\r\n    }\r\n    setMode(\"READ\");\r\n    setLoader(false);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    updatePatientConfig(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPatient(match.params.id);\r\n    getPatientConfig(match.params.id);\r\n    getAllObservation({patientid: match.params.id})\r\n  }, []);\r\n\r\n  const requestBP = async () => {\r\n    try {\r\n      const patientId = patient.rpi_patientid;\r\n      // const { data } = await MonitorRepository.requestBP(patientId);\r\n      MySwal.fire({\r\n        title: \"Are you sure?\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        confirmButtonColor: \"#3085d6\",\r\n        cancelButtonColor: \"#d33\",\r\n        confirmButtonText: \"Yes\",\r\n      }).then(async (result) => {\r\n        if (result.value) {\r\n          const { data } = await MonitorRepository.requestBP(patientId);\r\n          setRequestId(data.RequestResult[0].requestid);\r\n        }\r\n      });\r\n    } catch (e) {\r\n      if (e) {\r\n        // alert(\"no patient with that id\");\r\n        console.log(e);\r\n        MySwal.fire({\r\n          icon: \"error\",\r\n          title: \"Request BP failed.\",\r\n          text: e,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const confirmBPRequest = () => {\r\n    const LIMIT = 4;\r\n    const SECONDS = 30;\r\n    let cnt = 0;\r\n    const query = setInterval(() => {\r\n      if (requestId) {\r\n        if (cnt <= LIMIT) {\r\n          if (getBPRequest(requestId)) {\r\n            MySwal.fire({\r\n              icon: \"success\",\r\n              title: \"BP Success.\",\r\n            });\r\n            clearInterval(query);\r\n          }\r\n        } else {\r\n          clearInterval(query);\r\n        }\r\n        cnt++;\r\n      }\r\n    }, 1000*SECONDS)\r\n  };\r\n\r\n  const getBPRequest = async (requestid) => {\r\n    try {\r\n      const { data } = await MonitorRepository.getRequestBPValue(requestid);\r\n      return data.BPValue.length;\r\n    } catch (e) {\r\n      if (e) {\r\n        console.log(e);\r\n        MySwal.fire({\r\n          icon: \"error\",\r\n          title: \"Request BP failed.\",\r\n          text: e,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    confirmBPRequest();\r\n\r\n  }, [requestId])\r\n\r\n  return (\r\n    <>\r\n      <Progress open={loader} />\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Typography className={classes.row} align=\"left\" variant=\"h4\">\r\n            {`${ward}: COVID-19 PATIENT CHART`}\r\n          </Typography>\r\n        </Grid>\r\n        <Divider />\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Paper elevation={3} className={classes.paper}>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={8}>\r\n                {/* 1st row */}\r\n                <Grid alignItems=\"center\" container>\r\n                  <Grid item xs={4} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      Bed #:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_bednumber || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      DATE ADMITTED:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_date_admitted ? patient.rpi_date_admitted.slice(0, 10) : \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      TIME ADMITTED:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_date_admitted ? patient.rpi_date_admitted.slice(10) : \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                {/* 2nd row */}\r\n                <Grid alignItems=\"center\" container>\r\n                  <Grid item xs={6} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      NAME:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {`${patient.rpi_patientfname || \"----\"} ${\r\n                        patient.rpi_patientlname || \"----\"\r\n                      }`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={2} />\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      GENDER:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_gender || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                {/* 3rd row */}\r\n                <Grid alignItems=\"center\" container>\r\n                  <Grid item xs={4} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      DOB:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_birthday || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      AGE:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_age || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      CIVIL STATUS:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_civilstatus || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                {/* 4th row */}\r\n                <Grid alignItems=\"center\" container>\r\n                  <Grid item xs={12} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      ADDRESS:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_address || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                {/* 5th row */}\r\n                <Grid alignItems=\"center\" container>\r\n                  <Grid item xs={6} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      EMERGENCY CONTACT:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_contact_name || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={2} />\r\n                  <Grid item xs={3} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      RELATIONSHIP:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_contact_relationship || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                {/* 6th row */}\r\n                <Grid alignItems=\"center\" container>\r\n                  <Grid item xs={6} align=\"left\">\r\n                  </Grid>\r\n                  <Grid item xs={3} />\r\n                  <Grid item xs={3} />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                {/* 1st row */}\r\n                <Grid container>\r\n                  {/* <Grid item xs={12} style={{ marginBottom: 15 }}>\r\n                    <Grid container spacing={3}>\r\n                      <Grid item xs>\r\n                        <div style={{ backgroundColor: \"#f66464\", padding: \"5px\", color: \"white\" }}>\r\n                          <Typography display=\"inline\" variant=\"body1\" color=\"inherit\">\r\n                            {patient.rpi_classification || \"----\"}\r\n                          </Typography>\r\n                        </div>\r\n                      </Grid>\r\n                      <Grid item xs>\r\n                        <div style={{ backgroundColor: \"#72b4ee\", padding: \"5px\", color: \"white\" }}>\r\n                          <Typography display=\"inline\" variant=\"body1\" color=\"inherit\">\r\n                            {patient.rpi_covid19 || \"----\"}\r\n                          </Typography>\r\n                        </div>\r\n                      </Grid>\r\n                      <Grid item xs>\r\n                        <div style={{ backgroundColor: \"#ebebeb\", padding: \"5px\" }}>\r\n                          <Typography display=\"inline\" variant=\"body1\" color=\"inherit\">\r\n                            {patient.rpi_covid19 || \"----\"}\r\n                          </Typography>\r\n                        </div>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid> */}\r\n                  <Grid item xs={12} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      COVID-19 Diagnosis:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient[\"classification\"] || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      COVID-19 Case:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient[\"Covid Case\"] || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      Admission Status:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient[\"Admission Status\"] || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      CONTACT NOS:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_contact || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      EMAIL:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_email_add || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      EMERGENCY CONTACT NO.:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_contact_number || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      SSS/GSIS:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_sss_gsis_number || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} align=\"left\">\r\n                    <Typography\r\n                      display=\"inline\"\r\n                      variant=\"h6\"\r\n                      color=\"textSecondary\"\r\n                      gutterBottom\r\n                      className={classes.detailsKey}\r\n                    >\r\n                      PHILHEALTH:\r\n                    </Typography>\r\n                    <Typography display=\"inline\" variant=\"h6\" color=\"textPrimary\" gutterBottom>\r\n                      {patient.rpi_philhealth_number || \"----\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            {/* PATIENT CONFIG */}\r\n            <Typography variant=\"h5\" align=\"left\" style={{ marginTop: 30 }}>\r\n              PARAMETER SETTINGS\r\n              <IconButton style={{ margin: 10 }} onClick={() => setMode(\"EDIT\")}>\r\n                <Create />\r\n              </IconButton>\r\n            </Typography>\r\n            <Divider style={{ marginTop: 5 }} />\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <Grid container spacing={1} style={{ padding: 30 }}>\r\n                <Grid item xs={3}>\r\n                  <Typography variant=\"h6\" align=\"left\" style={{ marginBottom: 15 }}>\r\n                    ECG\r\n                  </Typography>\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        ST:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // value={patientConfig.rpc_ecg_st_msec || 0}\r\n                        name=\"ecg_st_msec\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">msec</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        error={!_.isEmpty(errors.ecg_st_msec)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                        // inputRef={register({ required: true })}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6} />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Typography variant=\"h6\" align=\"left\" style={{ marginBottom: 15 }}>\r\n                    HEART RATE\r\n                  </Typography>\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Upper:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">bpm</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"heartrate_upper_bpm\"\r\n                        error={!_.isEmpty(errors.heartrate_upper_bpm)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6} />\r\n                  </Grid>\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Lower:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">bpm</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"heartrate_lower_bpm\"\r\n                        error={!_.isEmpty(errors.heartrate_lower_bpm)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6} />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Typography variant=\"h6\" align=\"left\" style={{ marginBottom: 15 }}>\r\n                    PULSE RATE\r\n                  </Typography>\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Upper:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">bpm</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"pulserate_upper_bpm\"\r\n                        error={!_.isEmpty(errors.pulserate_upper_bpm)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6} />\r\n                  </Grid>\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Lower:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">bpm</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"pulserate_lower_bpm\"\r\n                        error={!_.isEmpty(errors.pulserate_lower_bpm)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6} />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  {/* START */}\r\n                  <Typography variant=\"h6\" align=\"left\" style={{ marginBottom: 15 }}>\r\n                    OXYGEN SATURATION\r\n                  </Typography>\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Upper:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        id=\"standard-start-adornment\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"oxygen_upper_saturation\"\r\n                        error={!_.isEmpty(errors.oxygen_upper_saturation)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6} />\r\n                  </Grid>\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Lower:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"oxygen_lower_saturation\"\r\n                        error={!_.isEmpty(errors.oxygen_lower_saturation)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6} />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  {/* START */}\r\n                  <Typography variant=\"h6\" align=\"left\" style={{ marginBottom: 15 }}>\r\n                    RESPIRATORY RATE\r\n                  </Typography>\r\n                  <br />\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Upper:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">rpm</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"respiratory_upper_rpm\"\r\n                        error={!_.isEmpty(errors.respiratory_upper_rpm)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6} />\r\n                  </Grid>\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Lower:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">rpm</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"respiratory_lower_rpm\"\r\n                        error={!_.isEmpty(errors.respiratory_lower_rpm)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6} />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  {/* START */}\r\n                  <Typography variant=\"h6\" align=\"left\" style={{ marginBottom: 15 }}>\r\n                    BLOOD PRESSURE\r\n                  </Typography>\r\n                  <Grid container alignItems=\"center\" justify=\"space-evenly\" direction=\"row\">\r\n                    <Grid item xs={3}>\r\n                      <Typography variant=\"body1\">Systolic</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                      <Typography variant=\"body1\">Diastolic</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Upper:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">mm Hg</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"bp_systolic_upper\"\r\n                        error={!_.isEmpty(errors.bp_systolic_upper)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Upper:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">mm Hg</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"bp_diastolic_upper\"\r\n                        error={!_.isEmpty(errors.bp_diastolic_upper)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Lower:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">mm Hg</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"bp_systolic_lower\"\r\n                        error={!_.isEmpty(errors.bp_systolic_lower)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Lower:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">mm Hg</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"bp_diastolic_lower\"\r\n                        error={!_.isEmpty(errors.bp_diastolic_lower)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Time Frame:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">minutes</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"time_frame\"\r\n                        error={!_.isEmpty(errors.time_frame)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  {/* START */}\r\n                  <Typography variant=\"h6\" align=\"left\" style={{ marginBottom: 15 }}>\r\n                    TEMPERATURE\r\n                  </Typography>\r\n                  <br />\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Upper:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">C</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"temperature_upper\"\r\n                        error={!_.isEmpty(errors.temperature_upper)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6} />\r\n                  </Grid>\r\n                  <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\r\n                    <Grid item xs={1}>\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        display=\"initial\"\r\n                        style={{ display: \"initial\", marginRight: 3 }}\r\n                      >\r\n                        Lower:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        size=\"small\"\r\n                        // className={clsx(classes.margin, classes.textField)}\r\n                        className={classes.textField}\r\n                        InputProps={{\r\n                          endAdornment: <InputAdornment position=\"end\">C</InputAdornment>,\r\n                          // readOnly: mode === \"READ\",\r\n                        }}\r\n                        disabled={mode === \"READ\"}\r\n                        name=\"temperature_lower\"\r\n                        error={!_.isEmpty(errors.temperature_lower)}\r\n                        inputRef={register({\r\n                          validate: {\r\n                            // integer: (value) =>\r\n                            //   parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0,\r\n                            integer: (value) => {\r\n                              if (typeof value === \"string\" && value.length === 0) {\r\n                                value = 0;\r\n                              }\r\n                              return parseInt(value, 10) >= 0 || parseInt(value, 10) <= 0;\r\n                            },\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6} />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  justify=\"flex-end\"\r\n                  style={mode === \"READ\" ? { visibility: \"hidden\", marginTop: \"30px\" } : { marginTop: \"30px\" }}\r\n                  spacing={2}\r\n                >\r\n                  <Grid item xs={1} style={{ marginRight: \"15px\" }}>\r\n                    <Button\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      onClick={() => setMode(\"READ\")}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item xs={1} style={{ marginRight: \"15px\" }}>\r\n                    <Button\r\n                      fullWidth\r\n                      type=\"submit\"\r\n                      disabled={mode === \"READ\"}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                    >\r\n                      SAVE\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n            {/* END PATIENT CONFIG */}\r\n            <Typography variant=\"h5\" align=\"left\" style={{ marginTop: 30 }}>\r\n              ACTIONS\r\n            </Typography>\r\n            <Divider style={{ marginTop: 5 }} />\r\n            <Grid container>\r\n              <Grid item xs={3}>\r\n                <Button\r\n                  onClick={requestBP}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: 15, float: \"left\" }}\r\n                >\r\n                  BP NOW\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n          <PatientNotes data={patient} getPatient={getPatient} />\r\n          {/* <VitalsTable data={tableData} /> */}\r\n          {observationList.map((el) => {\r\n            return (\r\n              <PatientChart\r\n                style={{ marginTop: \"50px\" }}\r\n                patientId={patient.rpi_patientid}\r\n                observation={el}\r\n              />\r\n            );\r\n          })}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PatientDetails;\r\n","import React, { Component, useState, useEffect } from 'react'\r\nimport range from 'lodash/range'\r\nimport last from 'lodash/last'\r\nimport { generateDrinkStats } from '@nivo/generators'\r\nimport * as time from 'd3-time'\r\nimport { timeFormat } from 'd3-time-format'\r\n// import { Line } from '../src'\r\nimport { ResponsiveLine as Line } from \"@nivo/line\";\r\n\r\nconst data = generateDrinkStats(18)\r\n\r\n\r\nconst commonProperties = {\r\n  width: 900,\r\n  height: 400,\r\n  margin: { top: 20, right: 20, bottom: 60, left: 80 },\r\n  data,\r\n  animate: true,\r\n  enableSlices: 'x',\r\n}\r\n\r\n\r\nclass RealTimeChart extends Component {\r\n  constructor(props) {\r\n      super(props)\r\n\r\n      const date = new Date()\r\n      date.setMinutes(0)\r\n      date.setSeconds(0)\r\n      date.setMilliseconds(0)\r\n\r\n      this.state = {\r\n          dataA: range(100).map(i => ({\r\n              x: time.timeMinute.offset(date, i * 30),\r\n              y: 10 + Math.round(Math.random() * 20),\r\n          })),\r\n          dataB: range(100).map(i => ({\r\n              x: time.timeMinute.offset(date, i * 30),\r\n              y: 30 + Math.round(Math.random() * 20),\r\n          })),\r\n          dataC: range(100).map(i => ({\r\n              x: time.timeMinute.offset(date, i * 30),\r\n              y: 60 + Math.round(Math.random() * 20),\r\n          })),\r\n      }\r\n\r\n      this.formatTime = timeFormat('%Y %b %d')\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n      this.timer = setInterval(this.next, 100)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n      clearInterval(this.timer)\r\n  }\r\n\r\n  next = () => {\r\n      const dataA = this.state.dataA.slice(1)\r\n      dataA.push({\r\n          x: time.timeMinute.offset(last(dataA).x, 30),\r\n          y: 10 + Math.round(Math.random() * 20),\r\n      })\r\n      const dataB = this.state.dataB.slice(1)\r\n      dataB.push({\r\n          x: time.timeMinute.offset(last(dataB).x, 30),\r\n          y: 30 + Math.round(Math.random() * 20),\r\n      })\r\n      const dataC = this.state.dataC.slice(1)\r\n      dataC.push({\r\n          x: time.timeMinute.offset(last(dataC).x, 30),\r\n          y: 60 + Math.round(Math.random() * 20),\r\n      })\r\n\r\n      this.setState({ dataA, dataB, dataC })\r\n  }\r\n\r\n  render() {\r\n      const { dataA, dataB, dataC } = this.state\r\n\r\n      return (\r\n        <div style={{height: 80}}>\r\n          asd\r\n          <Line\r\n              {...commonProperties}\r\n              margin={{ top: 30, right: 50, bottom: 60, left: 50 }}\r\n              data={[\r\n                  { id: 'A', data: dataA },\r\n                  { id: 'B', data: dataB },\r\n                  { id: 'C', data: dataC },\r\n              ]}\r\n              xScale={{ type: 'time', format: 'native' }}\r\n              yScale={{ type: 'linear', max: 100 }}\r\n              axisTop={{\r\n                  format: '%H:%M',\r\n                  tickValues: 'every 4 hours',\r\n              }}\r\n              axisBottom={{\r\n                  format: '%H:%M',\r\n                  tickValues: 'every 4 hours',\r\n                  legend: `${this.formatTime(dataA[0].x)} ——— ${this.formatTime(last(dataA).x)}`,\r\n                  legendPosition: 'middle',\r\n                  legendOffset: 46,\r\n              }}\r\n              axisRight={{}}\r\n              enablePoints={false}\r\n              enableGridX={true}\r\n              curve=\"monotoneX\"\r\n              animate={false}\r\n              motionStiffness={120}\r\n              motionDamping={50}\r\n              isInteractive={false}\r\n              enableSlices={false}\r\n              useMesh={true}\r\n              theme={{\r\n                  axis: { ticks: { text: { fontSize: 14 } } },\r\n                  grid: { line: { stroke: '#ddd', strokeDasharray: '1 2' } },\r\n              }}\r\n          />\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default RealTimeChart;\r\n","import React from \"react\";\r\nimport { Route, Switch, withRouter, Redirect } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport MiniDrawer from \"./components/layouts/Drawer\";\r\nimport Home from \"./components/Dashboard/Home\";\r\nimport TelemetryDashboard from \"./components/Monitor/Telemetry/Dashboard\";\r\nimport ListMonitor from \"./components/Monitor/List\";\r\nimport CreateMonitor from \"./components/Monitor/Create\";\r\nimport SetupMonitor from \"./components/Monitor/Setup\";\r\nimport PatientList from \"./components/Patient/List\";\r\nimport PatientRegister from \"./components/Patient/Register\";\r\nimport PatientDetails from \"./components/Patient/Details\";\r\nimport Testing from \"./components/utils/components/testing\";\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: [\r\n      \"-apple-system\",\r\n      \"BlinkMacSystemFont\",\r\n      '\"Segoe UI\"',\r\n      \"Roboto\",\r\n      '\"Helvetica Neue\"',\r\n      \"Arial\",\r\n      \"sans-serif\",\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(\",\"),\r\n    // fontFamily: ['\"Lato\"', \"Open Sans\", \"sans-serif\"].\r\n  },\r\n  // textDecoration: \"none\",\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ThemeProvider theme={theme}>\r\n        <Switch>\r\n          <Route exact path=\"/testing\" component={Testing} />\r\n          {/* <Route path=\"/monitors\" component={TelemetryDashboard} /> */}\r\n          <Route path=\"/telemetry/:id\" component={TelemetryDashboard} />\r\n          <MiniDrawer>\r\n            <Route path=\"/home\" component={Home} />\r\n            <Route path=\"/patient/details/:id\" component={PatientDetails} />\r\n            <Route path=\"/patient/list\" component={PatientList} />\r\n            <Route path=\"/patient/register\" component={PatientRegister} />\r\n            <Route path=\"/patient/update/:id\" component={PatientRegister} />\r\n            <Route path=\"/monitor/setup\" component={SetupMonitor} />\r\n            <Route path=\"/monitor/list\" component={ListMonitor} />\r\n            {/* <Route path=\"/monitor/create\" component={CreateMonitor} /> */}\r\n            {/* <Route path=\"/telemetry/:id\" component={TelemetryDashboard} /> */}\r\n            {/* <Route path=\"/patient/:id\" component={CreateMonitor} /> */}\r\n            {/* <Route path=\"/monitor/setup\" component={MonitorSetup} /> */}\r\n          </MiniDrawer>\r\n        </Switch>\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter forceRefresh={false}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}